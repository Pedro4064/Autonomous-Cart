
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800853c  0800853c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008544  08008544  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800854c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000010  0800855c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800855c  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5ee  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b53  00000000  00000000  0003d671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  000411c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001363  00000000  00000000  00042aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ac4  00000000  00000000  00043e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000215cf  00000000  00000000  000478cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112433  00000000  00000000  00068e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b14  00000000  00000000  0017b2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00181de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080084e4 	.word	0x080084e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080084e4 	.word	0x080084e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b970 	b.w	8000d8c <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <vPowerTrainSystemInit+0x20>)
 8000d96:	f004 fd99 	bl	80058cc <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <vPowerTrainSystemInit+0x20>)
 8000d9e:	f004 fed5 	bl	8005b4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000da2:	2104      	movs	r1, #4
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <vPowerTrainSystemInit+0x20>)
 8000da6:	f004 fed1 	bl	8005b4c <HAL_TIM_PWM_Start>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000048c 	.word	0x2000048c

08000db4 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <vPowerTrainSystemSetMotorDirection+0x1c>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d01f      	beq.n	8000e0e <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000dce:	e040      	b.n	8000e52 <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10b      	bne.n	8000dee <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	481f      	ldr	r0, [pc, #124]	; (8000e5c <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000dde:	f003 fb7f 	bl	80044e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	481c      	ldr	r0, [pc, #112]	; (8000e5c <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000dea:	f003 fb79 	bl	80044e0 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d12b      	bne.n	8000e4c <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000dfc:	f003 fb70 	bl	80044e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e08:	f003 fb6a 	bl	80044e0 <HAL_GPIO_WritePin>
			} break;
 8000e0c:	e01e      	b.n	8000e4c <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e1a:	f003 fb61 	bl	80044e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f003 fb5a 	bl	80044e0 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d10e      	bne.n	8000e50 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e38:	f003 fb52 	bl	80044e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f003 fb4b 	bl	80044e0 <HAL_GPIO_WritePin>
			} break;
 8000e4a:	e001      	b.n	8000e50 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000e50:	bf00      	nop
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000400 	.word	0x48000400

08000e60 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	ed87 0b00 	vstr	d0, [r7]
 8000e6c:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d009      	beq.n	8000e8c <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 8000e78:	e011      	b.n	8000e9e <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000e7c:	681c      	ldr	r4, [r3, #0]
 8000e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e82:	f7ff fd97 	bl	80009b4 <__aeabi_d2uiz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 8000e8a:	e008      	b.n	8000e9e <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000e8e:	681c      	ldr	r4, [r3, #0]
 8000e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e94:	f7ff fd8e 	bl	80009b4 <__aeabi_d2uiz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000e9c:	bf00      	nop
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000048c 	.word	0x2000048c

08000eac <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fae1 	bl	800848c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000ecc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ed0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000ed4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	4817      	ldr	r0, [pc, #92]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f36:	f001 ff5d 	bl	8002df4 <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f40:	f000 ff8a 	bl	8001e58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f50:	f002 fd72 	bl	8003a38 <HAL_ADCEx_MultiModeConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f5a:	f000 ff7d 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_ADC1_Init+0xec>)
 8000f60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f62:	2306      	movs	r3, #6
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f66:	2302      	movs	r3, #2
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f6a:	237f      	movs	r3, #127	; 0x7f
 8000f6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f7c:	f002 f8f6 	bl	800316c <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f86:	f000 ff67 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000002c 	.word	0x2000002c
 8000f98:	04300002 	.word	0x04300002

08000f9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 fa6f 	bl	800848c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fb0:	4a32      	ldr	r2, [pc, #200]	; (800107c <MX_ADC2_Init+0xe0>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_ADC2_Init+0xdc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_ADC2_Init+0xdc>)
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_ADC2_Init+0xdc>)
 800100a:	2200      	movs	r2, #0
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_ADC2_Init+0xdc>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <MX_ADC2_Init+0xdc>)
 8001018:	f001 feec 	bl	8002df4 <HAL_ADC_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001022:	f000 ff19 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_ADC2_Init+0xe4>)
 8001028:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800102a:	2306      	movs	r3, #6
 800102c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800102e:	2302      	movs	r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001032:	237f      	movs	r3, #127	; 0x7f
 8001034:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001036:	2304      	movs	r3, #4
 8001038:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_ADC2_Init+0xdc>)
 8001044:	f002 f892 	bl	800316c <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800104e:	f000 ff03 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_ADC2_Init+0xe8>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001056:	230c      	movs	r3, #12
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC2_Init+0xdc>)
 8001060:	f002 f884 	bl	800316c <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800106a:	f000 fef5 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000098 	.word	0x20000098
 800107c:	50000100 	.word	0x50000100
 8001080:	0c900008 	.word	0x0c900008
 8001084:	10c00010 	.word	0x10c00010

08001088 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 f9f3 	bl	800848c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <MX_ADC3_Init+0xe4>)
 80010a8:	4a31      	ldr	r2, [pc, #196]	; (8001170 <MX_ADC3_Init+0xe8>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_ADC3_Init+0xe4>)
 80010ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_ADC3_Init+0xe4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_ADC3_Init+0xe4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_ADC3_Init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_ADC3_Init+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_ADC3_Init+0xe4>)
 80010ce:	2204      	movs	r2, #4
 80010d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_ADC3_Init+0xe4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_ADC3_Init+0xe4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_ADC3_Init+0xe4>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC3_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC3_Init+0xe4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC3_Init+0xe4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_ADC3_Init+0xe4>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_ADC3_Init+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_ADC3_Init+0xe4>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_ADC3_Init+0xe4>)
 8001110:	f001 fe70 	bl	8002df4 <HAL_ADC_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800111a:	f000 fe9d 	bl	8001e58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <MX_ADC3_Init+0xe4>)
 800112a:	f002 fc85 	bl	8003a38 <HAL_ADCEx_MultiModeConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001134:	f000 fe90 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_ADC3_Init+0xec>)
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113c:	2306      	movs	r3, #6
 800113e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001140:	2302      	movs	r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001144:	237f      	movs	r3, #127	; 0x7f
 8001146:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001148:	2304      	movs	r3, #4
 800114a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_ADC3_Init+0xe4>)
 8001156:	f002 f809 	bl	800316c <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001160:	f000 fe7a 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000104 	.word	0x20000104
 8001170:	50000400 	.word	0x50000400
 8001174:	14f00020 	.word	0x14f00020

08001178 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f007 f981 	bl	800848c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_ADC4_Init+0xc0>)
 800118c:	4a2b      	ldr	r2, [pc, #172]	; (800123c <MX_ADC4_Init+0xc4>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_ADC4_Init+0xc0>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <MX_ADC4_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011be:	2201      	movs	r2, #1
 80011c0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <MX_ADC4_Init+0xc0>)
 80011f4:	f001 fdfe 	bl	8002df4 <HAL_ADC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80011fe:	f000 fe2b 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC4_Init+0xc8>)
 8001204:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001206:	2306      	movs	r3, #6
 8001208:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120e:	237f      	movs	r3, #127	; 0x7f
 8001210:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001212:	2304      	movs	r3, #4
 8001214:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_ADC4_Init+0xc0>)
 8001220:	f001 ffa4 	bl	800316c <HAL_ADC_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800122a:	f000 fe15 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000170 	.word	0x20000170
 800123c:	50000500 	.word	0x50000500
 8001240:	14f00020 	.word	0x14f00020

08001244 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2220      	movs	r2, #32
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f007 f91b 	bl	800848c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <MX_ADC5_Init+0xc4>)
 800125a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_ADC5_Init+0xc0>)
 800125e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001262:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_ADC5_Init+0xc0>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_ADC5_Init+0xc0>)
 800127e:	2204      	movs	r2, #4
 8001280:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_ADC5_Init+0xc0>)
 800128a:	2201      	movs	r2, #1
 800128c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001290:	2201      	movs	r2, #1
 8001292:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_ADC5_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_ADC5_Init+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_ADC5_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_ADC5_Init+0xc0>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_ADC5_Init+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_ADC5_Init+0xc0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_ADC5_Init+0xc0>)
 80012c0:	f001 fd98 	bl	8002df4 <HAL_ADC_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80012ca:	f000 fdc5 	bl	8001e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_ADC5_Init+0xc8>)
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d2:	2306      	movs	r3, #6
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012da:	237f      	movs	r3, #127	; 0x7f
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012de:	2304      	movs	r3, #4
 80012e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_ADC5_Init+0xc0>)
 80012ec:	f001 ff3e 	bl	800316c <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80012f6:	f000 fdaf 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001dc 	.word	0x200001dc
 8001308:	50000600 	.word	0x50000600
 800130c:	08600004 	.word	0x08600004

08001310 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0a6      	sub	sp, #152	; 0x98
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132c:	2254      	movs	r2, #84	; 0x54
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f007 f8ab 	bl	800848c <memset>
  if(adcHandle->Instance==ADC1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133e:	d16c      	bne.n	800141a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001346:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800134a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001350:	4618      	mov	r0, r3
 8001352:	f004 f815 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800135c:	f000 fd7c 	bl	8001e58 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001360:	4ba0      	ldr	r3, [pc, #640]	; (80015e4 <HAL_ADC_MspInit+0x2d4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a9f      	ldr	r2, [pc, #636]	; (80015e4 <HAL_ADC_MspInit+0x2d4>)
 8001368:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800136a:	4b9e      	ldr	r3, [pc, #632]	; (80015e4 <HAL_ADC_MspInit+0x2d4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d10b      	bne.n	800138a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001372:	4b9d      	ldr	r3, [pc, #628]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a9c      	ldr	r2, [pc, #624]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b9a      	ldr	r3, [pc, #616]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b97      	ldr	r3, [pc, #604]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a96      	ldr	r2, [pc, #600]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b94      	ldr	r3, [pc, #592]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f002 ff0d 	bl	80041dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013c2:	4b8a      	ldr	r3, [pc, #552]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013c4:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_ADC_MspInit+0x2e0>)
 80013c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013c8:	4b88      	ldr	r3, [pc, #544]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ce:	4b87      	ldr	r3, [pc, #540]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b85      	ldr	r3, [pc, #532]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b84      	ldr	r3, [pc, #528]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e0:	4b82      	ldr	r3, [pc, #520]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e8:	4b80      	ldr	r3, [pc, #512]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f0:	4b7e      	ldr	r3, [pc, #504]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013f2:	2220      	movs	r2, #32
 80013f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013f6:	4b7d      	ldr	r3, [pc, #500]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013fc:	487b      	ldr	r0, [pc, #492]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 80013fe:	f002 fd33 	bl	8003e68 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001408:	f000 fd26 	bl	8001e58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a77      	ldr	r2, [pc, #476]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
 8001412:	4a76      	ldr	r2, [pc, #472]	; (80015ec <HAL_ADC_MspInit+0x2dc>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001418:	e1e0      	b.n	80017dc <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	; (80015f4 <HAL_ADC_MspInit+0x2e4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d16c      	bne.n	80014fe <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800142a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800142e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001434:	4618      	mov	r0, r3
 8001436:	f003 ffa3 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8001440:	f000 fd0a 	bl	8001e58 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001444:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <HAL_ADC_MspInit+0x2d4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a66      	ldr	r2, [pc, #408]	; (80015e4 <HAL_ADC_MspInit+0x2d4>)
 800144c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800144e:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_ADC_MspInit+0x2d4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10b      	bne.n	800146e <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a63      	ldr	r2, [pc, #396]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 800145c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8001486:	23c0      	movs	r3, #192	; 0xc0
 8001488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f002 fe9b 	bl	80041dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014a6:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_ADC_MspInit+0x2ec>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014ae:	2224      	movs	r2, #36	; 0x24
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014cc:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014d4:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014d6:	2220      	movs	r2, #32
 80014d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014e0:	4845      	ldr	r0, [pc, #276]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014e2:	f002 fcc1 	bl	8003e68 <HAL_DMA_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80014ec:	f000 fcb4 	bl	8001e58 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a41      	ldr	r2, [pc, #260]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
 80014f6:	4a40      	ldr	r2, [pc, #256]	; (80015f8 <HAL_ADC_MspInit+0x2e8>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80014fc:	e16e      	b.n	80017dc <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3f      	ldr	r2, [pc, #252]	; (8001600 <HAL_ADC_MspInit+0x2f0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 8085 	bne.w	8001614 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001514:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151a:	4618      	mov	r0, r3
 800151c:	f003 ff30 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8001526:	f000 fc97 	bl	8001e58 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_ADC_MspInit+0x2f4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a34      	ldr	r2, [pc, #208]	; (8001604 <HAL_ADC_MspInit+0x2f4>)
 8001532:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_ADC_MspInit+0x2f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10b      	bne.n	8001554 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_ADC_MspInit+0x2d8>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001574:	2303      	movs	r3, #3
 8001576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001584:	4619      	mov	r1, r3
 8001586:	4820      	ldr	r0, [pc, #128]	; (8001608 <HAL_ADC_MspInit+0x2f8>)
 8001588:	f002 fe28 	bl	80041dc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_ADC_MspInit+0x300>)
 8001590:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 8001594:	2225      	movs	r2, #37	; 0x25
 8001596:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015bc:	2220      	movs	r2, #32
 80015be:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015c8:	f002 fc4e 	bl	8003e68 <HAL_DMA_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 80015d2:	f000 fc41 	bl	8001e58 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_ADC_MspInit+0x2fc>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80015e2:	e0fb      	b.n	80017dc <HAL_ADC_MspInit+0x4cc>
 80015e4:	20000428 	.word	0x20000428
 80015e8:	40021000 	.word	0x40021000
 80015ec:	20000248 	.word	0x20000248
 80015f0:	40020008 	.word	0x40020008
 80015f4:	50000100 	.word	0x50000100
 80015f8:	200002a8 	.word	0x200002a8
 80015fc:	4002001c 	.word	0x4002001c
 8001600:	50000400 	.word	0x50000400
 8001604:	2000042c 	.word	0x2000042c
 8001608:	48000400 	.word	0x48000400
 800160c:	20000308 	.word	0x20000308
 8001610:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a72      	ldr	r2, [pc, #456]	; (80017e4 <HAL_ADC_MspInit+0x4d4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d16c      	bne.n	80016f8 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800161e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001628:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fea6 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 800163a:	f000 fc0d 	bl	8001e58 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800163e:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_ADC_MspInit+0x4d8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a68      	ldr	r2, [pc, #416]	; (80017e8 <HAL_ADC_MspInit+0x4d8>)
 8001646:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_ADC_MspInit+0x4d8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001650:	4b66      	ldr	r3, [pc, #408]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a65      	ldr	r2, [pc, #404]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a5f      	ldr	r2, [pc, #380]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001688:	2303      	movs	r3, #3
 800168a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001698:	4619      	mov	r1, r3
 800169a:	4855      	ldr	r0, [pc, #340]	; (80017f0 <HAL_ADC_MspInit+0x4e0>)
 800169c:	f002 fd9e 	bl	80041dc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016a2:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <HAL_ADC_MspInit+0x4e8>)
 80016a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016a8:	2226      	movs	r2, #38	; 0x26
 80016aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016be:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c6:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80016ce:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016d0:	2220      	movs	r2, #32
 80016d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80016da:	4846      	ldr	r0, [pc, #280]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016dc:	f002 fbc4 	bl	8003e68 <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80016e6:	f000 fbb7 	bl	8001e58 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a41      	ldr	r2, [pc, #260]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
 80016f0:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x4e4>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016f6:	e071      	b.n	80017dc <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <HAL_ADC_MspInit+0x4ec>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d16c      	bne.n	80017dc <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800170c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fe34 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 800171e:	f000 fb9b 	bl	8001e58 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_ADC_MspInit+0x4d8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a2f      	ldr	r2, [pc, #188]	; (80017e8 <HAL_ADC_MspInit+0x4d8>)
 800172a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_ADC_MspInit+0x4d8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10b      	bne.n	800174c <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a2c      	ldr	r2, [pc, #176]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_ADC_MspInit+0x4dc>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8001764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176c:	2303      	movs	r3, #3
 800176e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f002 fd2b 	bl	80041dc <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x4f4>)
 800178a:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 800178e:	2227      	movs	r2, #39	; 0x27
 8001790:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017aa:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b2:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017b6:	2220      	movs	r2, #32
 80017b8:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017c2:	f002 fb51 	bl	8003e68 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 80017cc:	f000 fb44 	bl	8001e58 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_ADC_MspInit+0x4f0>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017dc:	bf00      	nop
 80017de:	3798      	adds	r7, #152	; 0x98
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	50000500 	.word	0x50000500
 80017e8:	2000042c 	.word	0x2000042c
 80017ec:	40021000 	.word	0x40021000
 80017f0:	48000400 	.word	0x48000400
 80017f4:	20000368 	.word	0x20000368
 80017f8:	40020044 	.word	0x40020044
 80017fc:	50000600 	.word	0x50000600
 8001800:	200003c8 	.word	0x200003c8
 8001804:	40020058 	.word	0x40020058

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6493      	str	r3, [r2, #72]	; 0x48
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_DMA_Init+0xb0>)
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <MX_DMA_Init+0xb0>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6493      	str	r3, [r2, #72]	; 0x48
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_DMA_Init+0xb0>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	200b      	movs	r0, #11
 8001844:	f002 fadb 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001848:	200b      	movs	r0, #11
 800184a:	f002 faf2 	bl	8003e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	200c      	movs	r0, #12
 8001854:	f002 fad3 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001858:	200c      	movs	r0, #12
 800185a:	f002 faea 	bl	8003e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	200d      	movs	r0, #13
 8001864:	f002 facb 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001868:	200d      	movs	r0, #13
 800186a:	f002 fae2 	bl	8003e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200e      	movs	r0, #14
 8001874:	f002 fac3 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001878:	200e      	movs	r0, #14
 800187a:	f002 fada 	bl	8003e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	200f      	movs	r0, #15
 8001884:	f002 fabb 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001888:	200f      	movs	r0, #15
 800188a:	f002 fad2 	bl	8003e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2010      	movs	r0, #16
 8001894:	f002 fab3 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001898:	2010      	movs	r0, #16
 800189a:	f002 faca 	bl	8003e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2011      	movs	r0, #17
 80018a4:	f002 faab 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018a8:	2011      	movs	r0, #17
 80018aa:	f002 fac2 	bl	8003e32 <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000

080018bc <vEncoderSystemInit>:
extern contador_encoder;

static int* pLeftMotorCoun, pRightMotorCount;

//void vEncoderSystemInit(int pLeftMotorCount, int pRightMotorCount) {
void vEncoderSystemInit(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 80018c0:	2100      	movs	r1, #0
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <vEncoderSystemInit+0x18>)
 80018c4:	f004 fab6 	bl	8005e34 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 80018c8:	2100      	movs	r1, #0
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <vEncoderSystemInit+0x1c>)
 80018cc:	f004 fab2 	bl	8005e34 <HAL_TIM_IC_Start_IT>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000570 	.word	0x20000570
 80018d8:	200005bc 	.word	0x200005bc

080018dc <vEncoderSystemExecuteMeasurement>:
void vEncoderSystemExecuteMeasurement(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

	   // Tempo de amostragem em segundos
	    float tempo_amostragem_s = tempo_amostragem_ms / 1000.0;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <vEncoderSystemExecuteMeasurement+0x68>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fdd8 	bl	800049c <__aeabi_ui2d>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <vEncoderSystemExecuteMeasurement+0x6c>)
 80018f2:	f7fe ff77 	bl	80007e4 <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f879 	bl	80009f4 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	607b      	str	r3, [r7, #4]

	    // Calcula o RPM
	    rpm = (contador_encoder * 60) / (160 * tempo_amostragem_s);
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <vEncoderSystemExecuteMeasurement+0x70>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4613      	mov	r3, r2
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800191a:	edd7 7a01 	vldr	s15, [r7, #4]
 800191e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001950 <vEncoderSystemExecuteMeasurement+0x74>
 8001922:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192e:	ee17 2a90 	vmov	r2, s15
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <vEncoderSystemExecuteMeasurement+0x78>)
 8001934:	601a      	str	r2, [r3, #0]

	    // Resetar o contador para a próxima amostragem
	    contador_encoder = 0;
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <vEncoderSystemExecuteMeasurement+0x70>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	408f4000 	.word	0x408f4000
 800194c:	20000488 	.word	0x20000488
 8001950:	43200000 	.word	0x43200000
 8001954:	20000430 	.word	0x20000430

08001958 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a65      	ldr	r2, [pc, #404]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001986:	4b60      	ldr	r3, [pc, #384]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a53      	ldr	r2, [pc, #332]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f002 fd76 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 80019fa:	4844      	ldr	r0, [pc, #272]	; (8001b0c <MX_GPIO_Init+0x1b4>)
 80019fc:	f002 fd70 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8001a00:	f242 33a0 	movw	r3, #9120	; 0x23a0
 8001a04:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	483e      	ldr	r0, [pc, #248]	; (8001b10 <MX_GPIO_Init+0x1b8>)
 8001a18:	f002 fbe0 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8001a1c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f002 fbd0 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	482d      	ldr	r0, [pc, #180]	; (8001b0c <MX_GPIO_Init+0x1b4>)
 8001a58:	f002 fbc0 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001a5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4824      	ldr	r0, [pc, #144]	; (8001b0c <MX_GPIO_Init+0x1b4>)
 8001a7a:	f002 fbaf 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 8001a7e:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	481d      	ldr	r0, [pc, #116]	; (8001b0c <MX_GPIO_Init+0x1b4>)
 8001a98:	f002 fba0 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aac:	2302      	movs	r3, #2
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <MX_GPIO_Init+0x1b8>)
 8001ab8:	f002 fb90 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001abc:	2304      	movs	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4810      	ldr	r0, [pc, #64]	; (8001b14 <MX_GPIO_Init+0x1bc>)
 8001ad2:	f002 fb83 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ada:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_GPIO_Init+0x1b4>)
 8001aec:	f002 fb76 	bl	80041dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f002 f982 	bl	8003dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f002 f999 	bl	8003e32 <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000c00 	.word	0x48000c00

08001b18 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_I2C2_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_I2C2_Init+0x7c>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b52:	480e      	ldr	r0, [pc, #56]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b54:	f002 fcff 	bl	8004556 <HAL_I2C_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f000 f97b 	bl	8001e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b66:	f002 fd91 	bl	800468c <HAL_I2CEx_ConfigAnalogFilter>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b70:	f000 f972 	bl	8001e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b78:	f002 fdd3 	bl	8004722 <HAL_I2CEx_ConfigDigitalFilter>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b82:	f000 f969 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000434 	.word	0x20000434
 8001b90:	40005800 	.word	0x40005800
 8001b94:	30a0a7fb 	.word	0x30a0a7fb

08001b98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a0      	sub	sp, #128	; 0x80
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	2254      	movs	r2, #84	; 0x54
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f006 fc67 	bl	800848c <memset>
  if(i2cHandle->Instance==I2C2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_I2C_MspInit+0xe0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d153      	bne.n	8001c70 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fbd3 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001be0:	f000 f93a 	bl	8001e58 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001c14:	2310      	movs	r3, #16
 8001c16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c24:	2304      	movs	r3, #4
 8001c26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <HAL_I2C_MspInit+0xe8>)
 8001c30:	f002 fad4 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	2312      	movs	r3, #18
 8001c3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c46:	2304      	movs	r3, #4
 8001c48:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f002 fac2 	bl	80041dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_I2C_MspInit+0xe4>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3780      	adds	r7, #128	; 0x80
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005800 	.word	0x40005800
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800
 8001c84:	00000000 	.word	0x00000000

08001c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8c:	f000 fe49 	bl	8002922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c90:	f000 f86c 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c94:	f7ff fe60 	bl	8001958 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c98:	f7ff fdb6 	bl	8001808 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001c9c:	f000 fd1a 	bl	80026d4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001ca0:	f7ff f904 	bl	8000eac <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ca4:	f7ff f97a 	bl	8000f9c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001ca8:	f7ff f9ee 	bl	8001088 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001cac:	f000 f9a4 	bl	8001ff8 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001cb0:	f000 fb42 	bl	8002338 <MX_TIM16_Init>
  MX_TIM4_Init();
 8001cb4:	f000 fa5c 	bl	8002170 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001cb8:	f7ff fa5e 	bl	8001178 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001cbc:	f7ff fac2 	bl	8001244 <MX_ADC5_Init>
  MX_I2C2_Init();
 8001cc0:	f7ff ff2a 	bl	8001b18 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001cc4:	f000 faa4 	bl	8002210 <MX_TIM8_Init>
  MX_TIM17_Init();
 8001cc8:	f000 fb80 	bl	80023cc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 8001ccc:	4826      	ldr	r0, [pc, #152]	; (8001d68 <main+0xe0>)
 8001cce:	f003 fe6d 	bl	80059ac <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 8001cd2:	f7ff f85d 	bl	8000d90 <vPowerTrainSystemInit>
  vEncoderSystemInit();
 8001cd6:	f7ff fdf1 	bl	80018bc <vEncoderSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff f869 	bl	8000db4 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, COUNTER_CLOCKWISE);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff f865 	bl	8000db4 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 8001cea:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001d50 <main+0xc8>
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff f8b6 	bl	8000e60 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 500);
 8001cf4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001d58 <main+0xd0>
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff f8b1 	bl	8000e60 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(60000);
 8001cfe:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001d02:	f000 fe7f 	bl	8002a04 <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 0);
 8001d06:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001d60 <main+0xd8>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff f8a8 	bl	8000e60 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8001d10:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8001d60 <main+0xd8>
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff f8a3 	bl	8000e60 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(10000);
 8001d1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d1e:	f000 fe71 	bl	8002a04 <HAL_Delay>

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, COUNTER_CLOCKWISE);
 8001d22:	2101      	movs	r1, #1
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff f845 	bl	8000db4 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, CLOCKWISE);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff f841 	bl	8000db4 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 8001d32:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001d50 <main+0xc8>
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff f892 	bl	8000e60 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 500);
 8001d3c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001d58 <main+0xd0>
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff f88d 	bl	8000e60 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 8001d46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d4a:	f000 fe5b 	bl	8002a04 <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001d4e:	e7c4      	b.n	8001cda <main+0x52>
 8001d50:	00000000 	.word	0x00000000
 8001d54:	408f4000 	.word	0x408f4000
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	407f4000 	.word	0x407f4000
	...
 8001d68:	200004d8 	.word	0x200004d8

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	; 0x50
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2238      	movs	r2, #56	; 0x38
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f006 fb86 	bl	800848c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f002 fd14 	bl	80047bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9e:	2340      	movs	r3, #64	; 0x40
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da2:	2302      	movs	r3, #2
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001daa:	2304      	movs	r3, #4
 8001dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dae:	2355      	movs	r3, #85	; 0x55
 8001db0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fdae 	bl	8004924 <HAL_RCC_OscConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dce:	f000 f843 	bl	8001e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2104      	movs	r1, #4
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 f8ac 	bl	8004f48 <HAL_RCC_ClockConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001df6:	f000 f82f 	bl	8001e58 <Error_Handler>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3750      	adds	r7, #80	; 0x50
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d104      	bne.n	8001e20 <HAL_TIM_IC_CaptureCallback+0x1c>
        contador_encoder++;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001e1e:	6013      	str	r3, [r2, #0]
    } /*if (htim->Instance == TIM16) {
    	contador_encoder++;
    }*/
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40014800 	.word	0x40014800
 8001e30:	20000488 	.word	0x20000488

08001e34 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_PeriodElapsedCallback+0x16>
    	vEncoderSystemExecuteMeasurement();
 8001e46:	f7ff fd49 	bl	80018dc <vEncoderSystemExecuteMeasurement>
    }
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40000800 	.word	0x40000800

08001e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <Error_Handler+0x8>
	...

08001e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6613      	str	r3, [r2, #96]	; 0x60
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e9a:	f002 fd33 	bl	8004904 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef8:	f000 fd66 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <DMA1_Channel1_IRQHandler+0x10>)
 8001f06:	f002 f857 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000248 	.word	0x20000248

08001f14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <DMA1_Channel2_IRQHandler+0x10>)
 8001f1a:	f002 f84d 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200002a8 	.word	0x200002a8

08001f28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <DMA1_Channel3_IRQHandler+0x10>)
 8001f2e:	f002 f843 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000308 	.word	0x20000308

08001f3c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <DMA1_Channel4_IRQHandler+0x10>)
 8001f42:	f002 f839 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000368 	.word	0x20000368

08001f50 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <DMA1_Channel5_IRQHandler+0x10>)
 8001f56:	f002 f82f 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003c8 	.word	0x200003c8

08001f64 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Channel6_IRQHandler+0x10>)
 8001f6a:	f002 f825 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000069c 	.word	0x2000069c

08001f78 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Channel7_IRQHandler+0x10>)
 8001f7e:	f002 f81b 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200006fc 	.word	0x200006fc

08001f8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001f92:	f004 f89f 	bl	80060d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001f98:	f004 f89c 	bl	80060d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000048c 	.word	0x2000048c
 8001fa4:	20000570 	.word	0x20000570

08001fa8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001fae:	f004 f891 	bl	80060d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001fb4:	f004 f88e 	bl	80060d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000048c 	.word	0x2000048c
 8001fc0:	200005bc 	.word	0x200005bc

08001fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fcc:	f002 faa0 	bl	8004510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b09c      	sub	sp, #112	; 0x70
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2234      	movs	r2, #52	; 0x34
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f006 fa2a 	bl	800848c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002038:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <MX_TIM1_Init+0x170>)
 800203a:	4a4c      	ldr	r2, [pc, #304]	; (800216c <MX_TIM1_Init+0x174>)
 800203c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800203e:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <MX_TIM1_Init+0x170>)
 8002040:	2210      	movs	r2, #16
 8002042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	4b48      	ldr	r3, [pc, #288]	; (8002168 <MX_TIM1_Init+0x170>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <MX_TIM1_Init+0x170>)
 800204c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b45      	ldr	r3, [pc, #276]	; (8002168 <MX_TIM1_Init+0x170>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <MX_TIM1_Init+0x170>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <MX_TIM1_Init+0x170>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002064:	4840      	ldr	r0, [pc, #256]	; (8002168 <MX_TIM1_Init+0x170>)
 8002066:	f003 fbd9 	bl	800581c <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002070:	f7ff fef2 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800207e:	4619      	mov	r1, r3
 8002080:	4839      	ldr	r0, [pc, #228]	; (8002168 <MX_TIM1_Init+0x170>)
 8002082:	f004 fb27 	bl	80066d4 <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800208c:	f7ff fee4 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002090:	4835      	ldr	r0, [pc, #212]	; (8002168 <MX_TIM1_Init+0x170>)
 8002092:	f003 fd03 	bl	8005a9c <HAL_TIM_PWM_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800209c:	f7ff fedc 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020b0:	4619      	mov	r1, r3
 80020b2:	482d      	ldr	r0, [pc, #180]	; (8002168 <MX_TIM1_Init+0x170>)
 80020b4:	f005 fa0c 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020be:	f7ff fecb 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c2:	2360      	movs	r3, #96	; 0x60
 80020c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ca:	2300      	movs	r3, #0
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ce:	2300      	movs	r3, #0
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020e2:	2200      	movs	r2, #0
 80020e4:	4619      	mov	r1, r3
 80020e6:	4820      	ldr	r0, [pc, #128]	; (8002168 <MX_TIM1_Init+0x170>)
 80020e8:	f004 f9e0 	bl	80064ac <HAL_TIM_PWM_ConfigChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80020f2:	f7ff feb1 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020fa:	2204      	movs	r2, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <MX_TIM1_Init+0x170>)
 8002100:	f004 f9d4 	bl	80064ac <HAL_TIM_PWM_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800210a:	f7ff fea5 	bl	8001e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002126:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM1_Init+0x170>)
 800214c:	f005 fa56 	bl	80075fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002156:	f7ff fe7f 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM1_Init+0x170>)
 800215c:	f000 fa5c 	bl	8002618 <HAL_TIM_MspPostInit>

}
 8002160:	bf00      	nop
 8002162:	3770      	adds	r7, #112	; 0x70
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000048c 	.word	0x2000048c
 800216c:	40012c00 	.word	0x40012c00

08002170 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_TIM4_Init+0x98>)
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <MX_TIM4_Init+0x9c>)
 8002192:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_TIM4_Init+0x98>)
 8002196:	f640 2227 	movw	r2, #2599	; 0xa27
 800219a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_TIM4_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_TIM4_Init+0x98>)
 80021a4:	f64f 7267 	movw	r2, #65383	; 0xff67
 80021a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_TIM4_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_TIM4_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021b6:	4814      	ldr	r0, [pc, #80]	; (8002208 <MX_TIM4_Init+0x98>)
 80021b8:	f003 fb30 	bl	800581c <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80021c2:	f7ff fe49 	bl	8001e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <MX_TIM4_Init+0x98>)
 80021d4:	f004 fa7e 	bl	80066d4 <HAL_TIM_ConfigClockSource>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80021de:	f7ff fe3b 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <MX_TIM4_Init+0x98>)
 80021f0:	f005 f96e 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80021fa:	f7ff fe2d 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200004d8 	.word	0x200004d8
 800220c:	40000800 	.word	0x40000800

08002210 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b098      	sub	sp, #96	; 0x60
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002216:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002222:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	615a      	str	r2, [r3, #20]
 8002234:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2234      	movs	r2, #52	; 0x34
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f006 f925 	bl	800848c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <MX_TIM8_Init+0x120>)
 8002244:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <MX_TIM8_Init+0x124>)
 8002246:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <MX_TIM8_Init+0x120>)
 800224a:	2200      	movs	r2, #0
 800224c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <MX_TIM8_Init+0x120>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <MX_TIM8_Init+0x120>)
 8002256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <MX_TIM8_Init+0x120>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <MX_TIM8_Init+0x120>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <MX_TIM8_Init+0x120>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800226e:	4830      	ldr	r0, [pc, #192]	; (8002330 <MX_TIM8_Init+0x120>)
 8002270:	f003 fc14 	bl	8005a9c <HAL_TIM_PWM_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800227a:	f7ff fded 	bl	8001e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800228a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800228e:	4619      	mov	r1, r3
 8002290:	4827      	ldr	r0, [pc, #156]	; (8002330 <MX_TIM8_Init+0x120>)
 8002292:	f005 f91d 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800229c:	f7ff fddc 	bl	8001e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a0:	2360      	movs	r3, #96	; 0x60
 80022a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a8:	2300      	movs	r3, #0
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022ac:	2300      	movs	r3, #0
 80022ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c0:	2200      	movs	r2, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <MX_TIM8_Init+0x120>)
 80022c6:	f004 f8f1 	bl	80064ac <HAL_TIM_PWM_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80022d0:	f7ff fdc2 	bl	8001e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002304:	2300      	movs	r3, #0
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM8_Init+0x120>)
 8002312:	f005 f973 	bl	80075fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800231c:	f7ff fd9c 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM8_Init+0x120>)
 8002322:	f000 f979 	bl	8002618 <HAL_TIM_MspPostInit>

}
 8002326:	bf00      	nop
 8002328:	3760      	adds	r7, #96	; 0x60
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000524 	.word	0x20000524
 8002334:	40013400 	.word	0x40013400

08002338 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_TIM16_Init+0x8c>)
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <MX_TIM16_Init+0x90>)
 800234e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_TIM16_Init+0x8c>)
 8002352:	22a9      	movs	r2, #169	; 0xa9
 8002354:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM16_Init+0x8c>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM16_Init+0x8c>)
 800235e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002362:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_TIM16_Init+0x8c>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_TIM16_Init+0x8c>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_TIM16_Init+0x8c>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002376:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_TIM16_Init+0x8c>)
 8002378:	f003 fa50 	bl	800581c <HAL_TIM_Base_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002382:	f7ff fd69 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002386:	480f      	ldr	r0, [pc, #60]	; (80023c4 <MX_TIM16_Init+0x8c>)
 8002388:	f003 fcf2 	bl	8005d70 <HAL_TIM_IC_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002392:	f7ff fd61 	bl	8001e58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800239a:	2301      	movs	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023a6:	463b      	mov	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM16_Init+0x8c>)
 80023ae:	f003 ffe0 	bl	8006372 <HAL_TIM_IC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80023b8:	f7ff fd4e 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000570 	.word	0x20000570
 80023c8:	40014400 	.word	0x40014400

080023cc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80023d2:	463b      	mov	r3, r7
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <MX_TIM17_Init+0x8c>)
 80023e0:	4a1e      	ldr	r2, [pc, #120]	; (800245c <MX_TIM17_Init+0x90>)
 80023e2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_TIM17_Init+0x8c>)
 80023e6:	22a9      	movs	r2, #169	; 0xa9
 80023e8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <MX_TIM17_Init+0x8c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <MX_TIM17_Init+0x8c>)
 80023f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80023f6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <MX_TIM17_Init+0x8c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <MX_TIM17_Init+0x8c>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <MX_TIM17_Init+0x8c>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800240a:	4813      	ldr	r0, [pc, #76]	; (8002458 <MX_TIM17_Init+0x8c>)
 800240c:	f003 fa06 	bl	800581c <HAL_TIM_Base_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8002416:	f7ff fd1f 	bl	8001e58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <MX_TIM17_Init+0x8c>)
 800241c:	f003 fca8 	bl	8005d70 <HAL_TIM_IC_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002426:	f7ff fd17 	bl	8001e58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800242e:	2301      	movs	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_TIM17_Init+0x8c>)
 8002442:	f003 ff96 	bl	8006372 <HAL_TIM_IC_ConfigChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 800244c:	f7ff fd04 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200005bc 	.word	0x200005bc
 800245c:	40014800 	.word	0x40014800

08002460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_TIM_Base_MspInit+0x160>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d11c      	bne.n	80024bc <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002482:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800248c:	6613      	str	r3, [r2, #96]	; 0x60
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2019      	movs	r0, #25
 80024a0:	f001 fcad 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024a4:	2019      	movs	r0, #25
 80024a6:	f001 fcc4 	bl	8003e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	201a      	movs	r0, #26
 80024b0:	f001 fca5 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80024b4:	201a      	movs	r0, #26
 80024b6:	f001 fcbc 	bl	8003e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80024ba:	e07c      	b.n	80025b6 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a41      	ldr	r2, [pc, #260]	; (80025c8 <HAL_TIM_Base_MspInit+0x168>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
}
 80024de:	e06a      	b.n	80025b6 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM16)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a39      	ldr	r2, [pc, #228]	; (80025cc <HAL_TIM_Base_MspInit+0x16c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d130      	bne.n	800254c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 80024ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ee:	4a35      	ldr	r2, [pc, #212]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f4:	6613      	str	r3, [r2, #96]	; 0x60
 80024f6:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 800251a:	2310      	movs	r3, #16
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800252a:	2301      	movs	r3, #1
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	4826      	ldr	r0, [pc, #152]	; (80025d0 <HAL_TIM_Base_MspInit+0x170>)
 8002536:	f001 fe51 	bl	80041dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2019      	movs	r0, #25
 8002540:	f001 fc5d 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002544:	2019      	movs	r0, #25
 8002546:	f001 fc74 	bl	8003e32 <HAL_NVIC_EnableIRQ>
}
 800254a:	e034      	b.n	80025b6 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM17)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <HAL_TIM_Base_MspInit+0x174>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d12f      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002560:	6613      	str	r3, [r2, #96]	; 0x60
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_TIM_Base_MspInit+0x164>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8002586:	2320      	movs	r3, #32
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002596:	230a      	movs	r3, #10
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259e:	4619      	mov	r1, r3
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <HAL_TIM_Base_MspInit+0x170>)
 80025a2:	f001 fe1b 	bl	80041dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	201a      	movs	r0, #26
 80025ac:	f001 fc27 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80025b0:	201a      	movs	r0, #26
 80025b2:	f001 fc3e 	bl	8003e32 <HAL_NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3738      	adds	r7, #56	; 0x38
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40014400 	.word	0x40014400
 80025d0:	48000400 	.word	0x48000400
 80025d4:	40014800 	.word	0x40014800

080025d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_TIM_PWM_MspInit+0x38>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10b      	bne.n	8002602 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_TIM_PWM_MspInit+0x3c>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_TIM_PWM_MspInit+0x3c>)
 80025f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f4:	6613      	str	r3, [r2, #96]	; 0x60
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_TIM_PWM_MspInit+0x3c>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40013400 	.word	0x40013400
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <HAL_TIM_MspPostInit+0xac>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11c      	bne.n	8002674 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_TIM_MspPostInit+0xb0>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <HAL_TIM_MspPostInit+0xb0>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_TIM_MspPostInit+0xb0>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8002652:	2303      	movs	r3, #3
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002662:	2302      	movs	r3, #2
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	4817      	ldr	r0, [pc, #92]	; (80026cc <HAL_TIM_MspPostInit+0xb4>)
 800266e:	f001 fdb5 	bl	80041dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002672:	e022      	b.n	80026ba <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <HAL_TIM_MspPostInit+0xb8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d11d      	bne.n	80026ba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_TIM_MspPostInit+0xb0>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_TIM_MspPostInit+0xb0>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_TIM_MspPostInit+0xb0>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8002696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80026a8:	2302      	movs	r3, #2
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b6:	f001 fd91 	bl	80041dc <HAL_GPIO_Init>
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	48000800 	.word	0x48000800
 80026d0:	40013400 	.word	0x40013400

080026d4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <MX_LPUART1_UART_Init+0x90>)
 80026dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002716:	4812      	ldr	r0, [pc, #72]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 8002718:	f005 f84a 	bl	80077b0 <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002722:	f7ff fb99 	bl	8001e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002726:	2100      	movs	r1, #0
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 800272a:	f005 fde5 	bl	80082f8 <HAL_UARTEx_SetTxFifoThreshold>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002734:	f7ff fb90 	bl	8001e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002738:	2100      	movs	r1, #0
 800273a:	4809      	ldr	r0, [pc, #36]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 800273c:	f005 fe1a 	bl	8008374 <HAL_UARTEx_SetRxFifoThreshold>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002746:	f7ff fb87 	bl	8001e58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_LPUART1_UART_Init+0x8c>)
 800274c:	f005 fd9b 	bl	8008286 <HAL_UARTEx_DisableFifoMode>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002756:	f7ff fb7f 	bl	8001e58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000608 	.word	0x20000608
 8002764:	40008000 	.word	0x40008000

08002768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b09e      	sub	sp, #120	; 0x78
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	2254      	movs	r2, #84	; 0x54
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f005 fe7f 	bl	800848c <memset>
  if(uartHandle->Instance==LPUART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a49      	ldr	r2, [pc, #292]	; (80028b8 <HAL_UART_MspInit+0x150>)
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 808a 	bne.w	80028ae <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800279a:	2320      	movs	r3, #32
 800279c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fdea 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027b2:	f7ff fb51 	bl	8001e58 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_UART_MspInit+0x154>)
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	4a40      	ldr	r2, [pc, #256]	; (80028bc <HAL_UART_MspInit+0x154>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_UART_MspInit+0x154>)
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_UART_MspInit+0x154>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a3a      	ldr	r2, [pc, #232]	; (80028bc <HAL_UART_MspInit+0x154>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_UART_MspInit+0x154>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80027e6:	230c      	movs	r3, #12
 80027e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80027f6:	230c      	movs	r3, #12
 80027f8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002804:	f001 fcea 	bl	80041dc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_UART_MspInit+0x158>)
 800280a:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_UART_MspInit+0x15c>)
 800280c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002810:	2222      	movs	r2, #34	; 0x22
 8002812:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_UART_MspInit+0x158>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002828:	2200      	movs	r2, #0
 800282a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_UART_MspInit+0x158>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002834:	2200      	movs	r2, #0
 8002836:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_UART_MspInit+0x158>)
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800283e:	4820      	ldr	r0, [pc, #128]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002840:	f001 fb12 	bl	8003e68 <HAL_DMA_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800284a:	f7ff fb05 	bl	8001e58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002856:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <HAL_UART_MspInit+0x158>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_UART_MspInit+0x160>)
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_UART_MspInit+0x164>)
 8002860:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_UART_MspInit+0x160>)
 8002864:	2223      	movs	r2, #35	; 0x23
 8002866:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_UART_MspInit+0x160>)
 800286a:	2210      	movs	r2, #16
 800286c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_UART_MspInit+0x160>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_UART_MspInit+0x160>)
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_UART_MspInit+0x160>)
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_UART_MspInit+0x160>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_UART_MspInit+0x160>)
 8002888:	2200      	movs	r2, #0
 800288a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_UART_MspInit+0x160>)
 800288e:	2200      	movs	r2, #0
 8002890:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <HAL_UART_MspInit+0x160>)
 8002894:	f001 fae8 	bl	8003e68 <HAL_DMA_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800289e:	f7ff fadb 	bl	8001e58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_UART_MspInit+0x160>)
 80028a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_UART_MspInit+0x160>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80028ae:	bf00      	nop
 80028b0:	3778      	adds	r7, #120	; 0x78
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40008000 	.word	0x40008000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	2000069c 	.word	0x2000069c
 80028c4:	4002006c 	.word	0x4002006c
 80028c8:	200006fc 	.word	0x200006fc
 80028cc:	40020080 	.word	0x40020080

080028d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d0:	480d      	ldr	r0, [pc, #52]	; (8002908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d4:	f7ff fb7e 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	; (8002910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f005 fdcd 	bl	800849c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002902:	f7ff f9c1 	bl	8001c88 <main>

08002906 <LoopForever>:

LoopForever:
    b LoopForever
 8002906:	e7fe      	b.n	8002906 <LoopForever>
  ldr   r0, =_estack
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002914:	0800854c 	.word	0x0800854c
  ldr r2, =_sbss
 8002918:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800291c:	20000760 	.word	0x20000760

08002920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC1_2_IRQHandler>

08002922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f001 fa5b 	bl	8003de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002932:	2000      	movs	r0, #0
 8002934:	f000 f80e 	bl	8002954 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	e001      	b.n	8002948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002944:	f7ff fa8e 	bl	8001e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002948:	79fb      	ldrb	r3, [r7, #7]

}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_InitTick+0x68>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_InitTick+0x6c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_InitTick+0x68>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002974:	fbb1 f3f3 	udiv	r3, r1, r3
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fa66 	bl	8003e4e <HAL_SYSTICK_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d809      	bhi.n	80029a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	2200      	movs	r2, #0
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	f001 fa32 	bl	8003dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_InitTick+0x70>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e007      	b.n	80029b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e004      	b.n	80029b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000000c 	.word	0x2000000c
 80029c0:	20000004 	.word	0x20000004
 80029c4:	20000008 	.word	0x20000008

080029c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_IncTick+0x1c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_IncTick+0x20>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_IncTick+0x1c>)
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	2000075c 	.word	0x2000075c
 80029e8:	2000000c 	.word	0x2000000c

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	2000075c 	.word	0x2000075c

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d004      	beq.n	8002a28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_Delay+0x40>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a28:	bf00      	nop
 8002a2a:	f7ff ffdf 	bl	80029ec <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d8f7      	bhi.n	8002a2a <HAL_Delay+0x26>
  {
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000000c 	.word	0x2000000c

08002a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3360      	adds	r3, #96	; 0x60
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <LL_ADC_SetOffset+0x44>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	03fff000 	.word	0x03fff000

08002af8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3360      	adds	r3, #96	; 0x60
 8002b06:	461a      	mov	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3360      	adds	r3, #96	; 0x60
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b087      	sub	sp, #28
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3360      	adds	r3, #96	; 0x60
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	615a      	str	r2, [r3, #20]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3330      	adds	r3, #48	; 0x30
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	4413      	add	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	211f      	movs	r1, #31
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	401a      	ands	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	f003 011f 	and.w	r1, r3, #31
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	431a      	orrs	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3314      	adds	r3, #20
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0e5b      	lsrs	r3, r3, #25
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	4413      	add	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0d1b      	lsrs	r3, r3, #20
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2107      	movs	r1, #7
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	401a      	ands	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	0d1b      	lsrs	r3, r3, #20
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0318 	and.w	r3, r3, #24
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc0:	40d9      	lsrs	r1, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	0007ffff 	.word	0x0007ffff

08002ce4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6093      	str	r3, [r2, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <LL_ADC_IsEnabled+0x18>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_ADC_IsEnabled+0x1a>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1a9      	b.n	8003162 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fe fa77 	bl	8001310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff67 	bl	8002d08 <LL_ADC_IsDeepPowerDownEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff4d 	bl	8002ce4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff82 	bl	8002d58 <LL_ADC_IsInternalRegulatorEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d115      	bne.n	8002e86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff66 	bl	8002d30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e64:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_ADC_Init+0x2e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	4a9c      	ldr	r2, [pc, #624]	; (80030dc <HAL_ADC_Init+0x2e8>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f9      	bne.n	8002e7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff64 	bl	8002d58 <LL_ADC_IsInternalRegulatorEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff75 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 8002ebc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8142 	bne.w	8003150 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 813e 	bne.w	8003150 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff49 	bl	8002d80 <LL_ADC_IsEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d141      	bne.n	8002f78 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d004      	beq.n	8002f08 <HAL_ADC_Init+0x114>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a77      	ldr	r2, [pc, #476]	; (80030e0 <HAL_ADC_Init+0x2ec>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10f      	bne.n	8002f28 <HAL_ADC_Init+0x134>
 8002f08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f0c:	f7ff ff38 	bl	8002d80 <LL_ADC_IsEnabled>
 8002f10:	4604      	mov	r4, r0
 8002f12:	4873      	ldr	r0, [pc, #460]	; (80030e0 <HAL_ADC_Init+0x2ec>)
 8002f14:	f7ff ff34 	bl	8002d80 <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4323      	orrs	r3, r4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e012      	b.n	8002f4e <HAL_ADC_Init+0x15a>
 8002f28:	486e      	ldr	r0, [pc, #440]	; (80030e4 <HAL_ADC_Init+0x2f0>)
 8002f2a:	f7ff ff29 	bl	8002d80 <LL_ADC_IsEnabled>
 8002f2e:	4604      	mov	r4, r0
 8002f30:	486d      	ldr	r0, [pc, #436]	; (80030e8 <HAL_ADC_Init+0x2f4>)
 8002f32:	f7ff ff25 	bl	8002d80 <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	431c      	orrs	r4, r3
 8002f3a:	486c      	ldr	r0, [pc, #432]	; (80030ec <HAL_ADC_Init+0x2f8>)
 8002f3c:	f7ff ff20 	bl	8002d80 <LL_ADC_IsEnabled>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4323      	orrs	r3, r4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f5a:	d004      	beq.n	8002f66 <HAL_ADC_Init+0x172>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5f      	ldr	r2, [pc, #380]	; (80030e0 <HAL_ADC_Init+0x2ec>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_Init+0x176>
 8002f66:	4a62      	ldr	r2, [pc, #392]	; (80030f0 <HAL_ADC_Init+0x2fc>)
 8002f68:	e000      	b.n	8002f6c <HAL_ADC_Init+0x178>
 8002f6a:	4a62      	ldr	r2, [pc, #392]	; (80030f4 <HAL_ADC_Init+0x300>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f7ff fd68 	bl	8002a48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7f5b      	ldrb	r3, [r3, #29]
 8002f7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d106      	bne.n	8002fb4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	045b      	lsls	r3, r3, #17
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b48      	ldr	r3, [pc, #288]	; (80030f8 <HAL_ADC_Init+0x304>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fee4 	bl	8002dcc <LL_ADC_INJ_IsConversionOngoing>
 8003004:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d17f      	bne.n	800310c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d17c      	bne.n	800310c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003016:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302e:	f023 0302 	bic.w	r3, r3, #2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	430b      	orrs	r3, r1
 800303a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d017      	beq.n	8003074 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003052:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800305c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6911      	ldr	r1, [r2, #16]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003072:	e013      	b.n	800309c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003082:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003098:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d12a      	bne.n	80030fc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030c8:	430a      	orrs	r2, r1
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
 80030d6:	e019      	b.n	800310c <HAL_ADC_Init+0x318>
 80030d8:	20000004 	.word	0x20000004
 80030dc:	053e2d63 	.word	0x053e2d63
 80030e0:	50000100 	.word	0x50000100
 80030e4:	50000400 	.word	0x50000400
 80030e8:	50000500 	.word	0x50000500
 80030ec:	50000600 	.word	0x50000600
 80030f0:	50000300 	.word	0x50000300
 80030f4:	50000700 	.word	0x50000700
 80030f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10c      	bne.n	800312e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f023 010f 	bic.w	r1, r3, #15
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	1e5a      	subs	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
 800312c:	e007      	b.n	800313e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 020f 	bic.w	r2, r2, #15
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	65da      	str	r2, [r3, #92]	; 0x5c
 800314e:	e007      	b.n	8003160 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	f043 0210 	orr.w	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003160:	7ffb      	ldrb	r3, [r7, #31]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	bf00      	nop

0800316c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b0b6      	sub	sp, #216	; 0xd8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x24>
 800318a:	2302      	movs	r3, #2
 800318c:	f000 bc13 	b.w	80039b6 <HAL_ADC_ConfigChannel+0x84a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fe02 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 83f3 	bne.w	8003990 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7ff fd18 	bl	8002bec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fdf0 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 80031c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fdfc 	bl	8002dcc <LL_ADC_INJ_IsConversionOngoing>
 80031d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 81d9 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 81d4 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f4:	d10f      	bne.n	8003216 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	4619      	mov	r1, r3
 8003202:	f7ff fd1f 	bl	8002c44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fcd9 	bl	8002bc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003214:	e00e      	b.n	8003234 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	461a      	mov	r2, r3
 8003224:	f7ff fd0e 	bl	8002c44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fcc9 	bl	8002bc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	08db      	lsrs	r3, r3, #3
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b04      	cmp	r3, #4
 8003254:	d022      	beq.n	800329c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003266:	f7ff fc23 	bl	8002ab0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	461a      	mov	r2, r3
 8003278:	f7ff fc6f 	bl	8002b5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x126>
 800328c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003290:	e000      	b.n	8003294 <HAL_ADC_ConfigChannel+0x128>
 8003292:	2300      	movs	r3, #0
 8003294:	461a      	mov	r2, r3
 8003296:	f7ff fc7b 	bl	8002b90 <LL_ADC_SetOffsetSaturation>
 800329a:	e17b      	b.n	8003594 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fc28 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x15c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fc1d 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 021f 	and.w	r2, r3, #31
 80032c6:	e01e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x19a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fc12 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e004      	b.n	8003304 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80032fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_ADC_ConfigChannel+0x1b2>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	e018      	b.n	8003350 <HAL_ADC_ConfigChannel+0x1e4>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800333a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e004      	b.n	8003350 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fbe1 	bl	8002b24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fbc5 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <HAL_ADC_ConfigChannel+0x222>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fbba 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	e01e      	b.n	80033cc <HAL_ADC_ConfigChannel+0x260>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fbaf 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e004      	b.n	80033ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80033c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x278>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	e018      	b.n	8003416 <HAL_ADC_ConfigChannel+0x2aa>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e004      	b.n	8003416 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800340c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003416:	429a      	cmp	r2, r3
 8003418:	d106      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fb7e 	bl	8002b24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fb62 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x2e8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fb57 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	e01e      	b.n	8003492 <HAL_ADC_ConfigChannel+0x326>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fb4c 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800347a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003486:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x33e>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0e9b      	lsrs	r3, r3, #26
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	e016      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x36c>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e004      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80034ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d8:	429a      	cmp	r2, r3
 80034da:	d106      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fb1d 	bl	8002b24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2103      	movs	r1, #3
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fb01 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x3aa>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2103      	movs	r1, #3
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff faf6 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	e017      	b.n	8003546 <HAL_ADC_ConfigChannel+0x3da>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2103      	movs	r1, #3
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff faeb 	bl	8002af8 <LL_ADC_GetOffsetChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800352e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003530:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_ADC_ConfigChannel+0x3f2>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0e9b      	lsrs	r3, r3, #26
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	e011      	b.n	8003582 <HAL_ADC_ConfigChannel+0x416>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800356c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800356e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e003      	b.n	8003582 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003582:	429a      	cmp	r2, r3
 8003584:	d106      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	2103      	movs	r1, #3
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fac8 	bl	8002b24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fbf1 	bl	8002d80 <LL_ADC_IsEnabled>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 813d 	bne.w	8003820 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f7ff fb72 	bl	8002c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4aa2      	ldr	r2, [pc, #648]	; (8003848 <HAL_ADC_ConfigChannel+0x6dc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	f040 812e 	bne.w	8003820 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x480>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e019      	b.n	8003620 <HAL_ADC_ConfigChannel+0x4b4>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2b09      	cmp	r3, #9
 8003618:	bf94      	ite	ls
 800361a:	2301      	movls	r3, #1
 800361c:	2300      	movhi	r3, #0
 800361e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003620:	2b00      	cmp	r3, #0
 8003622:	d079      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x4d4>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	0e9b      	lsrs	r3, r3, #26
 8003636:	3301      	adds	r3, #1
 8003638:	069b      	lsls	r3, r3, #26
 800363a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363e:	e015      	b.n	800366c <HAL_ADC_ConfigChannel+0x500>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003658:	2320      	movs	r3, #32
 800365a:	e003      	b.n	8003664 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	069b      	lsls	r3, r3, #26
 8003668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_ADC_ConfigChannel+0x520>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0e9b      	lsrs	r3, r3, #26
 800367e:	3301      	adds	r3, #1
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	e017      	b.n	80036bc <HAL_ADC_ConfigChannel+0x550>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800369a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e003      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80036a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	ea42 0103 	orr.w	r1, r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x576>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	051b      	lsls	r3, r3, #20
 80036e0:	e018      	b.n	8003714 <HAL_ADC_ConfigChannel+0x5a8>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e003      	b.n	8003706 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003714:	430b      	orrs	r3, r1
 8003716:	e07e      	b.n	8003816 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x5c8>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	069b      	lsls	r3, r3, #26
 800372e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003732:	e015      	b.n	8003760 <HAL_ADC_ConfigChannel+0x5f4>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e003      	b.n	8003758 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	3301      	adds	r3, #1
 800375a:	069b      	lsls	r3, r3, #26
 800375c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x614>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	3301      	adds	r3, #1
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	e017      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x644>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	61fb      	str	r3, [r7, #28]
  return result;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e003      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	ea42 0103 	orr.w	r1, r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x670>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	3b1e      	subs	r3, #30
 80037d4:	051b      	lsls	r3, r3, #20
 80037d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037da:	e01b      	b.n	8003814 <HAL_ADC_ConfigChannel+0x6a8>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	613b      	str	r3, [r7, #16]
  return result;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e003      	b.n	8003800 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	f003 021f 	and.w	r2, r3, #31
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	3b1e      	subs	r3, #30
 800380e:	051b      	lsls	r3, r3, #20
 8003810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003814:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800381a:	4619      	mov	r1, r3
 800381c:	f7ff fa12 	bl	8002c44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_ADC_ConfigChannel+0x6e0>)
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80be 	beq.w	80039aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003836:	d004      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x6d6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_ADC_ConfigChannel+0x6e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x6ec>
 8003842:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_ADC_ConfigChannel+0x6e8>)
 8003844:	e009      	b.n	800385a <HAL_ADC_ConfigChannel+0x6ee>
 8003846:	bf00      	nop
 8003848:	407f0000 	.word	0x407f0000
 800384c:	80080000 	.word	0x80080000
 8003850:	50000100 	.word	0x50000100
 8003854:	50000300 	.word	0x50000300
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_ADC_ConfigChannel+0x854>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f91a 	bl	8002a94 <LL_ADC_GetCommonPathInternalCh>
 8003860:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a56      	ldr	r2, [pc, #344]	; (80039c4 <HAL_ADC_ConfigChannel+0x858>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x70c>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a55      	ldr	r2, [pc, #340]	; (80039c8 <HAL_ADC_ConfigChannel+0x85c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d13a      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d134      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388c:	d005      	beq.n	800389a <HAL_ADC_ConfigChannel+0x72e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_ADC_ConfigChannel+0x860>)
 8003894:	4293      	cmp	r3, r2
 8003896:	f040 8085 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x742>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_ADC_ConfigChannel+0x864>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x746>
 80038ae:	4a49      	ldr	r2, [pc, #292]	; (80039d4 <HAL_ADC_ConfigChannel+0x868>)
 80038b0:	e000      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x748>
 80038b2:	4a43      	ldr	r2, [pc, #268]	; (80039c0 <HAL_ADC_ConfigChannel+0x854>)
 80038b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7ff f8d5 	bl	8002a6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c4:	4b44      	ldr	r3, [pc, #272]	; (80039d8 <HAL_ADC_ConfigChannel+0x86c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	4a44      	ldr	r2, [pc, #272]	; (80039dc <HAL_ADC_ConfigChannel+0x870>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038de:	e002      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f9      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ec:	e05a      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <HAL_ADC_ConfigChannel+0x874>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d125      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11f      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <HAL_ADC_ConfigChannel+0x864>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d104      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x7ac>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_ADC_ConfigChannel+0x878>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d047      	beq.n	80039a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003920:	d004      	beq.n	800392c <HAL_ADC_ConfigChannel+0x7c0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_ADC_ConfigChannel+0x864>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x7c4>
 800392c:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <HAL_ADC_ConfigChannel+0x868>)
 800392e:	e000      	b.n	8003932 <HAL_ADC_ConfigChannel+0x7c6>
 8003930:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <HAL_ADC_ConfigChannel+0x854>)
 8003932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7ff f896 	bl	8002a6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003942:	e031      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a27      	ldr	r2, [pc, #156]	; (80039e8 <HAL_ADC_ConfigChannel+0x87c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d12d      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800394e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d127      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_ADC_ConfigChannel+0x864>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396c:	d004      	beq.n	8003978 <HAL_ADC_ConfigChannel+0x80c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_ADC_ConfigChannel+0x864>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x810>
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_ADC_ConfigChannel+0x868>)
 800397a:	e000      	b.n	800397e <HAL_ADC_ConfigChannel+0x812>
 800397c:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <HAL_ADC_ConfigChannel+0x854>)
 800397e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003982:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f7ff f870 	bl	8002a6e <LL_ADC_SetCommonPathInternalCh>
 800398e:	e00c      	b.n	80039aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039a2:	e002      	b.n	80039aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a4:	bf00      	nop
 80039a6:	e000      	b.n	80039aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	37d8      	adds	r7, #216	; 0xd8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	50000700 	.word	0x50000700
 80039c4:	c3210000 	.word	0xc3210000
 80039c8:	90c00010 	.word	0x90c00010
 80039cc:	50000600 	.word	0x50000600
 80039d0:	50000100 	.word	0x50000100
 80039d4:	50000300 	.word	0x50000300
 80039d8:	20000004 	.word	0x20000004
 80039dc:	053e2d63 	.word	0x053e2d63
 80039e0:	c7520000 	.word	0xc7520000
 80039e4:	50000500 	.word	0x50000500
 80039e8:	cb840000 	.word	0xcb840000

080039ec <LL_ADC_IsEnabled>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <LL_ADC_IsEnabled+0x18>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <LL_ADC_IsEnabled+0x1a>
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d101      	bne.n	8003a2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b0a1      	sub	sp, #132	; 0x84
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0e7      	b.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a62:	2300      	movs	r3, #0
 8003a64:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a6e:	d102      	bne.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	e009      	b.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6e      	ldr	r2, [pc, #440]	; (8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003a80:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	e001      	b.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0be      	b.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ffb1 	bl	8003a12 <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ffab 	bl	8003a12 <LL_ADC_REG_IsConversionOngoing>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 80a0 	bne.w	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 809c 	bne.w	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad4:	d004      	beq.n	8003ae0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a55      	ldr	r2, [pc, #340]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ae0:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ae2:	e000      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ae4:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ae6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d04b      	beq.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b02:	035b      	lsls	r3, r3, #13
 8003b04:	430b      	orrs	r3, r1
 8003b06:	431a      	orrs	r2, r3
 8003b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b14:	d004      	beq.n	8003b20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a45      	ldr	r2, [pc, #276]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10f      	bne.n	8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003b20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b24:	f7ff ff62 	bl	80039ec <LL_ADC_IsEnabled>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	4841      	ldr	r0, [pc, #260]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b2c:	f7ff ff5e 	bl	80039ec <LL_ADC_IsEnabled>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4323      	orrs	r3, r4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e012      	b.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b40:	483c      	ldr	r0, [pc, #240]	; (8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b42:	f7ff ff53 	bl	80039ec <LL_ADC_IsEnabled>
 8003b46:	4604      	mov	r4, r0
 8003b48:	483b      	ldr	r0, [pc, #236]	; (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b4a:	f7ff ff4f 	bl	80039ec <LL_ADC_IsEnabled>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	431c      	orrs	r4, r3
 8003b52:	483c      	ldr	r0, [pc, #240]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b54:	f7ff ff4a 	bl	80039ec <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d056      	beq.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	6811      	ldr	r1, [r2, #0]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	6892      	ldr	r2, [r2, #8]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	431a      	orrs	r2, r3
 8003b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b84:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b86:	e047      	b.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9c:	d004      	beq.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ba8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bac:	f7ff ff1e 	bl	80039ec <LL_ADC_IsEnabled>
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	481f      	ldr	r0, [pc, #124]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bb4:	f7ff ff1a 	bl	80039ec <LL_ADC_IsEnabled>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4323      	orrs	r3, r4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e012      	b.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003bc8:	481a      	ldr	r0, [pc, #104]	; (8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bca:	f7ff ff0f 	bl	80039ec <LL_ADC_IsEnabled>
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4819      	ldr	r0, [pc, #100]	; (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003bd2:	f7ff ff0b 	bl	80039ec <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	431c      	orrs	r4, r3
 8003bda:	481a      	ldr	r0, [pc, #104]	; (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003bdc:	f7ff ff06 	bl	80039ec <LL_ADC_IsEnabled>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4323      	orrs	r3, r4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d012      	beq.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bfa:	f023 030f 	bic.w	r3, r3, #15
 8003bfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c02:	e009      	b.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c16:	e000      	b.n	8003c1a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3784      	adds	r7, #132	; 0x84
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	50000100 	.word	0x50000100
 8003c34:	50000400 	.word	0x50000400
 8003c38:	50000500 	.word	0x50000500
 8003c3c:	50000300 	.word	0x50000300
 8003c40:	50000700 	.word	0x50000700
 8003c44:	50000600 	.word	0x50000600

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7a:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4907      	ldr	r1, [pc, #28]	; (8003ce4 <__NVIC_EnableIRQ+0x38>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000e100 	.word	0xe000e100

08003ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	db0a      	blt.n	8003d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	490c      	ldr	r1, [pc, #48]	; (8003d34 <__NVIC_SetPriority+0x4c>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	0112      	lsls	r2, r2, #4
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d10:	e00a      	b.n	8003d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <__NVIC_SetPriority+0x50>)
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	440b      	add	r3, r1
 8003d26:	761a      	strb	r2, [r3, #24]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000e100 	.word	0xe000e100
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f1c3 0307 	rsb	r3, r3, #7
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	bf28      	it	cs
 8003d5a:	2304      	movcs	r3, #4
 8003d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d902      	bls.n	8003d6c <NVIC_EncodePriority+0x30>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3b03      	subs	r3, #3
 8003d6a:	e000      	b.n	8003d6e <NVIC_EncodePriority+0x32>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	401a      	ands	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d84:	f04f 31ff 	mov.w	r1, #4294967295
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43d9      	mvns	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d94:	4313      	orrs	r3, r2
         );
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db4:	d301      	bcc.n	8003dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003db6:	2301      	movs	r3, #1
 8003db8:	e00f      	b.n	8003dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <SysTick_Config+0x40>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	f7ff ff8e 	bl	8003ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <SysTick_Config+0x40>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <SysTick_Config+0x40>)
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000e010 	.word	0xe000e010

08003de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff29 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0c:	f7ff ff40 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7ff ff90 	bl	8003d3c <NVIC_EncodePriority>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff5f 	bl	8003ce8 <__NVIC_SetPriority>
}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff33 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ffa4 	bl	8003da4 <SysTick_Config>
 8003e5c:	4603      	mov	r3, r0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08d      	b.n	8003f96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_DMA_Init+0x138>)
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d80f      	bhi.n	8003ea6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_DMA_Init+0x13c>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_DMA_Init+0x140>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	009a      	lsls	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_DMA_Init+0x144>)
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ea4:	e00e      	b.n	8003ec4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <HAL_DMA_Init+0x148>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <HAL_DMA_Init+0x140>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	009a      	lsls	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a3c      	ldr	r2, [pc, #240]	; (8003fb4 <HAL_DMA_Init+0x14c>)
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8fe 	bl	8004118 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f24:	d102      	bne.n	8003f2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d010      	beq.n	8003f6c <HAL_DMA_Init+0x104>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d80c      	bhi.n	8003f6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f91e 	bl	8004194 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e008      	b.n	8003f7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40020407 	.word	0x40020407
 8003fa4:	bffdfff8 	.word	0xbffdfff8
 8003fa8:	cccccccd 	.word	0xcccccccd
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	bffdfbf8 	.word	0xbffdfbf8
 8003fb4:	40020400 	.word	0x40020400

08003fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2204      	movs	r2, #4
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d026      	beq.n	8004032 <HAL_DMA_IRQHandler+0x7a>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d021      	beq.n	8004032 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2104      	movs	r1, #4
 800401a:	fa01 f202 	lsl.w	r2, r1, r2
 800401e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b00      	cmp	r3, #0
 8004026:	d071      	beq.n	800410c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004030:	e06c      	b.n	800410c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2202      	movs	r2, #2
 800403c:	409a      	lsls	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02e      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d029      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020a 	bic.w	r2, r2, #10
 800406c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f003 021f 	and.w	r2, r3, #31
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2102      	movs	r1, #2
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d038      	beq.n	800410c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040a2:	e033      	b.n	800410c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2208      	movs	r2, #8
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02a      	beq.n	800410e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d025      	beq.n	800410e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 020e 	bic.w	r2, r2, #14
 80040d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f003 021f 	and.w	r2, r3, #31
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800410c:	bf00      	nop
 800410e:	bf00      	nop
}
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d802      	bhi.n	8004132 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e001      	b.n	8004136 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004134:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3b08      	subs	r3, #8
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a0b      	ldr	r2, [pc, #44]	; (8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004162:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40020407 	.word	0x40020407
 8004184:	40020800 	.word	0x40020800
 8004188:	40020820 	.word	0x40020820
 800418c:	cccccccd 	.word	0xcccccccd
 8004190:	40020880 	.word	0x40020880

08004194 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041b6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	1000823f 	.word	0x1000823f
 80041d8:	40020940 	.word	0x40020940

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ea:	e15a      	b.n	80044a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 814c 	beq.w	800449c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d005      	beq.n	800421c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004218:	2b02      	cmp	r3, #2
 800421a:	d130      	bne.n	800427e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004252:	2201      	movs	r2, #1
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4013      	ands	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0201 	and.w	r2, r3, #1
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d017      	beq.n	80042ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	2203      	movs	r2, #3
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d123      	bne.n	800430e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	08da      	lsrs	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	220f      	movs	r2, #15
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	08da      	lsrs	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3208      	adds	r2, #8
 8004308:	6939      	ldr	r1, [r7, #16]
 800430a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a6 	beq.w	800449c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004350:	4b5b      	ldr	r3, [pc, #364]	; (80044c0 <HAL_GPIO_Init+0x2e4>)
 8004352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004354:	4a5a      	ldr	r2, [pc, #360]	; (80044c0 <HAL_GPIO_Init+0x2e4>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6613      	str	r3, [r2, #96]	; 0x60
 800435c:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <HAL_GPIO_Init+0x2e4>)
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004368:	4a56      	ldr	r2, [pc, #344]	; (80044c4 <HAL_GPIO_Init+0x2e8>)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3302      	adds	r3, #2
 8004370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	220f      	movs	r2, #15
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004392:	d01f      	beq.n	80043d4 <HAL_GPIO_Init+0x1f8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a4c      	ldr	r2, [pc, #304]	; (80044c8 <HAL_GPIO_Init+0x2ec>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d019      	beq.n	80043d0 <HAL_GPIO_Init+0x1f4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a4b      	ldr	r2, [pc, #300]	; (80044cc <HAL_GPIO_Init+0x2f0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_GPIO_Init+0x1f0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a4a      	ldr	r2, [pc, #296]	; (80044d0 <HAL_GPIO_Init+0x2f4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00d      	beq.n	80043c8 <HAL_GPIO_Init+0x1ec>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a49      	ldr	r2, [pc, #292]	; (80044d4 <HAL_GPIO_Init+0x2f8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <HAL_GPIO_Init+0x1e8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a48      	ldr	r2, [pc, #288]	; (80044d8 <HAL_GPIO_Init+0x2fc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_GPIO_Init+0x1e4>
 80043bc:	2305      	movs	r3, #5
 80043be:	e00a      	b.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043c0:	2306      	movs	r3, #6
 80043c2:	e008      	b.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043c4:	2304      	movs	r3, #4
 80043c6:	e006      	b.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043c8:	2303      	movs	r3, #3
 80043ca:	e004      	b.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e002      	b.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043d4:	2300      	movs	r3, #0
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	f002 0203 	and.w	r2, r2, #3
 80043dc:	0092      	lsls	r2, r2, #2
 80043de:	4093      	lsls	r3, r2
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043e6:	4937      	ldr	r1, [pc, #220]	; (80044c4 <HAL_GPIO_Init+0x2e8>)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	3302      	adds	r3, #2
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043f4:	4b39      	ldr	r3, [pc, #228]	; (80044dc <HAL_GPIO_Init+0x300>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004418:	4a30      	ldr	r2, [pc, #192]	; (80044dc <HAL_GPIO_Init+0x300>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800441e:	4b2f      	ldr	r3, [pc, #188]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	43db      	mvns	r3, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004442:	4a26      	ldr	r2, [pc, #152]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <HAL_GPIO_Init+0x300>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800446c:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_GPIO_Init+0x300>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004496:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3301      	adds	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f47f ae9d 	bne.w	80041ec <HAL_GPIO_Init+0x10>
  }
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40010000 	.word	0x40010000
 80044c8:	48000400 	.word	0x48000400
 80044cc:	48000800 	.word	0x48000800
 80044d0:	48000c00 	.word	0x48000c00
 80044d4:	48001000 	.word	0x48001000
 80044d8:	48001400 	.word	0x48001400
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
 80044ec:	4613      	mov	r3, r2
 80044ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044f0:	787b      	ldrb	r3, [r7, #1]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044fc:	e002      	b.n	8004504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004526:	4a05      	ldr	r2, [pc, #20]	; (800453c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f806 	bl	8004540 <HAL_GPIO_EXTI_Callback>
  }
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40010400 	.word	0x40010400

08004540 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e08d      	b.n	8004684 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fd fb0b 	bl	8001b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2224      	movs	r2, #36	; 0x24
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d107      	bne.n	80045d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045cc:	609a      	str	r2, [r3, #8]
 80045ce:	e006      	b.n	80045de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d108      	bne.n	80045f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	e007      	b.n	8004608 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004606:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800462a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69d9      	ldr	r1, [r3, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1a      	ldr	r2, [r3, #32]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d138      	bne.n	8004714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e032      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b20      	cmp	r3, #32
 8004736:	d139      	bne.n	80047ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004742:	2302      	movs	r3, #2
 8004744:	e033      	b.n	80047ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2224      	movs	r2, #36	; 0x24
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004774:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d141      	bne.n	800484e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ca:	4b4b      	ldr	r3, [pc, #300]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d131      	bne.n	800483c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d8:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047de:	4a46      	ldr	r2, [pc, #280]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f0:	4a41      	ldr	r2, [pc, #260]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047f8:	4b40      	ldr	r3, [pc, #256]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2232      	movs	r2, #50	; 0x32
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	4a3f      	ldr	r2, [pc, #252]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	0c9b      	lsrs	r3, r3, #18
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800480e:	e002      	b.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3b01      	subs	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d102      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f2      	bne.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800482a:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d158      	bne.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e057      	b.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800483c:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004842:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800484c:	e04d      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004854:	d141      	bne.n	80048da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004856:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004862:	d131      	bne.n	80048c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486a:	4a23      	ldr	r2, [pc, #140]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800487c:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004884:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2232      	movs	r2, #50	; 0x32
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	0c9b      	lsrs	r3, r3, #18
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800489a:	e002      	b.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3b01      	subs	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d102      	bne.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f2      	bne.n	800489c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d112      	bne.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e011      	b.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ce:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048d8:	e007      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40007000 	.word	0x40007000
 80048fc:	20000004 	.word	0x20000004
 8004900:	431bde83 	.word	0x431bde83

08004904 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800490e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004912:	6093      	str	r3, [r2, #8]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40007000 	.word	0x40007000

08004924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e2fe      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d075      	beq.n	8004a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004942:	4b97      	ldr	r3, [pc, #604]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494c:	4b94      	ldr	r3, [pc, #592]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d102      	bne.n	8004962 <HAL_RCC_OscConfig+0x3e>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d002      	beq.n	8004968 <HAL_RCC_OscConfig+0x44>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d10b      	bne.n	8004980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004968:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05b      	beq.n	8004a2c <HAL_RCC_OscConfig+0x108>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d157      	bne.n	8004a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e2d9      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d106      	bne.n	8004998 <HAL_RCC_OscConfig+0x74>
 800498a:	4b85      	ldr	r3, [pc, #532]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a84      	ldr	r2, [pc, #528]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e01d      	b.n	80049d4 <HAL_RCC_OscConfig+0xb0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x98>
 80049a2:	4b7f      	ldr	r3, [pc, #508]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7e      	ldr	r2, [pc, #504]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7b      	ldr	r2, [pc, #492]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e00b      	b.n	80049d4 <HAL_RCC_OscConfig+0xb0>
 80049bc:	4b78      	ldr	r3, [pc, #480]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a77      	ldr	r2, [pc, #476]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b75      	ldr	r3, [pc, #468]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a74      	ldr	r2, [pc, #464]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fe f806 	bl	80029ec <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fe f802 	bl	80029ec <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e29e      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0xc0>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd fff2 	bl	80029ec <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd ffee 	bl	80029ec <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e28a      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	4b60      	ldr	r3, [pc, #384]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0xe8>
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d075      	beq.n	8004b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b59      	ldr	r3, [pc, #356]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	d102      	bne.n	8004a5a <HAL_RCC_OscConfig+0x136>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_OscConfig+0x13c>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d11f      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a60:	4b4f      	ldr	r3, [pc, #316]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_OscConfig+0x154>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e25d      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4b49      	ldr	r3, [pc, #292]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	4946      	ldr	r1, [pc, #280]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a8c:	4b45      	ldr	r3, [pc, #276]	; (8004ba4 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fd ff5f 	bl	8002954 <HAL_InitTick>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d043      	beq.n	8004b24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e249      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d023      	beq.n	8004af0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa8:	4b3d      	ldr	r3, [pc, #244]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd ff9a 	bl	80029ec <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fd ff96 	bl	80029ec <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e232      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ace:	4b34      	ldr	r3, [pc, #208]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	492d      	ldr	r1, [pc, #180]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
 8004aee:	e01a      	b.n	8004b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af0:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd ff76 	bl	80029ec <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b04:	f7fd ff72 	bl	80029ec <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e20e      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b16:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x1e0>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d041      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3a:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fd ff4f 	bl	80029ec <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fd ff4b 	bl	80029ec <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1e7      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ef      	beq.n	8004b52 <HAL_RCC_OscConfig+0x22e>
 8004b72:	e020      	b.n	8004bb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7a:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fd ff32 	bl	80029ec <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b8a:	e00d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8c:	f7fd ff2e 	bl	80029ec <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d906      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1ca      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba8:	4b8c      	ldr	r3, [pc, #560]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1ea      	bne.n	8004b8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80a6 	beq.w	8004d10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bc8:	4b84      	ldr	r3, [pc, #528]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x2b4>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x2b6>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bde:	4b7f      	ldr	r3, [pc, #508]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	4a7e      	ldr	r2, [pc, #504]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bea:	4b7c      	ldr	r3, [pc, #496]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfa:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <HAL_RCC_OscConfig+0x4bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d118      	bne.n	8004c38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c06:	4b76      	ldr	r3, [pc, #472]	; (8004de0 <HAL_RCC_OscConfig+0x4bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a75      	ldr	r2, [pc, #468]	; (8004de0 <HAL_RCC_OscConfig+0x4bc>)
 8004c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c12:	f7fd feeb 	bl	80029ec <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1a:	f7fd fee7 	bl	80029ec <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e183      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2c:	4b6c      	ldr	r3, [pc, #432]	; (8004de0 <HAL_RCC_OscConfig+0x4bc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d108      	bne.n	8004c52 <HAL_RCC_OscConfig+0x32e>
 8004c40:	4b66      	ldr	r3, [pc, #408]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	4a65      	ldr	r2, [pc, #404]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c50:	e024      	b.n	8004c9c <HAL_RCC_OscConfig+0x378>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d110      	bne.n	8004c7c <HAL_RCC_OscConfig+0x358>
 8004c5a:	4b60      	ldr	r3, [pc, #384]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	4a5e      	ldr	r2, [pc, #376]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6a:	4b5c      	ldr	r3, [pc, #368]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	4a5a      	ldr	r2, [pc, #360]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7a:	e00f      	b.n	8004c9c <HAL_RCC_OscConfig+0x378>
 8004c7c:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	4a56      	ldr	r2, [pc, #344]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8c:	4b53      	ldr	r3, [pc, #332]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	4a52      	ldr	r2, [pc, #328]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f023 0304 	bic.w	r3, r3, #4
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fd fea2 	bl	80029ec <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cac:	f7fd fe9e 	bl	80029ec <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e138      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc2:	4b46      	ldr	r3, [pc, #280]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ed      	beq.n	8004cac <HAL_RCC_OscConfig+0x388>
 8004cd0:	e015      	b.n	8004cfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fd fe8b 	bl	80029ec <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fd fe87 	bl	80029ec <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e121      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf0:	4b3a      	ldr	r3, [pc, #232]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1ed      	bne.n	8004cda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d24:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fd fe5a 	bl	80029ec <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3c:	f7fd fe56 	bl	80029ec <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0f2      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d4e:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ef      	beq.n	8004d3c <HAL_RCC_OscConfig+0x418>
 8004d5c:	e01b      	b.n	8004d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d5e:	4b1f      	ldr	r3, [pc, #124]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fd fe3d 	bl	80029ec <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d76:	f7fd fe39 	bl	80029ec <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e0d5      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d88:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ef      	bne.n	8004d76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80c9 	beq.w	8004f32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	f000 8083 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d15e      	bne.n	8004e74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <HAL_RCC_OscConfig+0x4b8>)
 8004dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd fe13 	bl	80029ec <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc8:	e00c      	b.n	8004de4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fd fe0f 	bl	80029ec <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d905      	bls.n	8004de4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0ab      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	4b55      	ldr	r3, [pc, #340]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ec      	bne.n	8004dca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df0:	4b52      	ldr	r3, [pc, #328]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	4b52      	ldr	r3, [pc, #328]	; (8004f40 <HAL_RCC_OscConfig+0x61c>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6a11      	ldr	r1, [r2, #32]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e00:	3a01      	subs	r2, #1
 8004e02:	0112      	lsls	r2, r2, #4
 8004e04:	4311      	orrs	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e0a:	0212      	lsls	r2, r2, #8
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e12:	0852      	lsrs	r2, r2, #1
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0552      	lsls	r2, r2, #21
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0652      	lsls	r2, r2, #25
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e2a:	06d2      	lsls	r2, r2, #27
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	4943      	ldr	r1, [pc, #268]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a40      	ldr	r2, [pc, #256]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e40:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fdce 	bl	80029ec <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd fdca 	bl	80029ec <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e066      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	4b35      	ldr	r3, [pc, #212]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x530>
 8004e72:	e05e      	b.n	8004f32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd fdb4 	bl	80029ec <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd fdb0 	bl	80029ec <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04c      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9a:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ea6:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	4924      	ldr	r1, [pc, #144]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_RCC_OscConfig+0x620>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
 8004eb2:	e03e      	b.n	8004f32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e039      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d12c      	bne.n	8004f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d123      	bne.n	8004f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d11b      	bne.n	8004f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d113      	bne.n	8004f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d109      	bne.n	8004f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	3b01      	subs	r3, #1
 8004f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	019f800c 	.word	0x019f800c
 8004f44:	feeefffc 	.word	0xfeeefffc

08004f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e11e      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b91      	ldr	r3, [pc, #580]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d910      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b8e      	ldr	r3, [pc, #568]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 020f 	bic.w	r2, r3, #15
 8004f76:	498c      	ldr	r1, [pc, #560]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7e:	4b8a      	ldr	r3, [pc, #552]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e106      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d073      	beq.n	8005084 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d129      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa4:	4b81      	ldr	r3, [pc, #516]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0f4      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fb4:	f000 f99e 	bl	80052f4 <RCC_GetSysClockFreqFromPLLSource>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <HAL_RCC_ClockConfig+0x268>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d93f      	bls.n	8005042 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fc2:	4b7a      	ldr	r3, [pc, #488]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d033      	beq.n	8005042 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d12f      	bne.n	8005042 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fe2:	4b72      	ldr	r3, [pc, #456]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fea:	4a70      	ldr	r2, [pc, #448]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e024      	b.n	8005042 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0c6      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005010:	4b66      	ldr	r3, [pc, #408]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0be      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005020:	f000 f8ce 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8005024:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4a61      	ldr	r2, [pc, #388]	; (80051b0 <HAL_RCC_ClockConfig+0x268>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d909      	bls.n	8005042 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800502e:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005036:	4a5d      	ldr	r2, [pc, #372]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005042:	4b5a      	ldr	r3, [pc, #360]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4957      	ldr	r1, [pc, #348]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005054:	f7fd fcca 	bl	80029ec <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fd fcc6 	bl	80029ec <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	; 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e095      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	4b4e      	ldr	r3, [pc, #312]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 020c 	and.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d1eb      	bne.n	800505c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d023      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800509c:	4b43      	ldr	r3, [pc, #268]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4a42      	ldr	r2, [pc, #264]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050b4:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b39      	ldr	r3, [pc, #228]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4936      	ldr	r1, [pc, #216]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
 80050d6:	e008      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d105      	bne.n	80050ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050de:	4b33      	ldr	r3, [pc, #204]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a32      	ldr	r2, [pc, #200]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 80050e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d21d      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f8:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 020f 	bic.w	r2, r3, #15
 8005100:	4929      	ldr	r1, [pc, #164]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005108:	f7fd fc70 	bl	80029ec <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fd fc6c 	bl	80029ec <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e03b      	b.n	800519e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCC_ClockConfig+0x260>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d1ed      	bne.n	8005110 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4917      	ldr	r1, [pc, #92]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	490f      	ldr	r1, [pc, #60]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005172:	f000 f825 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <HAL_RCC_ClockConfig+0x264>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	490c      	ldr	r1, [pc, #48]	; (80051b4 <HAL_RCC_ClockConfig+0x26c>)
 8005184:	5ccb      	ldrb	r3, [r1, r3]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_RCC_ClockConfig+0x270>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x274>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fbdc 	bl	8002954 <HAL_InitTick>
 800519c:	4603      	mov	r3, r0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40022000 	.word	0x40022000
 80051ac:	40021000 	.word	0x40021000
 80051b0:	04c4b400 	.word	0x04c4b400
 80051b4:	080084fc 	.word	0x080084fc
 80051b8:	20000004 	.word	0x20000004
 80051bc:	20000008 	.word	0x20000008

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051c6:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e047      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d102      	bne.n	80051ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051e4:	4b26      	ldr	r3, [pc, #152]	; (8005280 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	e03e      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d136      	bne.n	8005264 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005200:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	3301      	adds	r3, #1
 800520c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d10c      	bne.n	800522e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005214:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	4a16      	ldr	r2, [pc, #88]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521e:	68d2      	ldr	r2, [r2, #12]
 8005220:	0a12      	lsrs	r2, r2, #8
 8005222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	617b      	str	r3, [r7, #20]
      break;
 800522c:	e00c      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005238:	68d2      	ldr	r2, [r2, #12]
 800523a:	0a12      	lsrs	r2, r2, #8
 800523c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]
      break;
 8005246:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	0e5b      	lsrs	r3, r3, #25
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	3301      	adds	r3, #1
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e001      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005268:	693b      	ldr	r3, [r7, #16]
}
 800526a:	4618      	mov	r0, r3
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000
 800527c:	00f42400 	.word	0x00f42400
 8005280:	016e3600 	.word	0x016e3600

08005284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_GetHCLKFreq+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000004 	.word	0x20000004

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052a0:	f7ff fff0 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4904      	ldr	r1, [pc, #16]	; (80052c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0800850c 	.word	0x0800850c

080052c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052cc:	f7ff ffda 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0adb      	lsrs	r3, r3, #11
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4904      	ldr	r1, [pc, #16]	; (80052f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000
 80052f0:	0800850c 	.word	0x0800850c

080052f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005304:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d10c      	bne.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005318:	4a17      	ldr	r2, [pc, #92]	; (8005378 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	4a14      	ldr	r2, [pc, #80]	; (8005374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005322:	68d2      	ldr	r2, [r2, #12]
 8005324:	0a12      	lsrs	r2, r2, #8
 8005326:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	617b      	str	r3, [r7, #20]
    break;
 8005330:	e00c      	b.n	800534c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005332:	4a12      	ldr	r2, [pc, #72]	; (800537c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800533c:	68d2      	ldr	r2, [r2, #12]
 800533e:	0a12      	lsrs	r2, r2, #8
 8005340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]
    break;
 800534a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	0e5b      	lsrs	r3, r3, #25
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	3301      	adds	r3, #1
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005366:	687b      	ldr	r3, [r7, #4]
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40021000 	.word	0x40021000
 8005378:	016e3600 	.word	0x016e3600
 800537c:	00f42400 	.word	0x00f42400

08005380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005388:	2300      	movs	r3, #0
 800538a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800538c:	2300      	movs	r3, #0
 800538e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8098 	beq.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539e:	2300      	movs	r3, #0
 80053a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053a2:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ae:	4b40      	ldr	r3, [pc, #256]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	4a3f      	ldr	r2, [pc, #252]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b8:	6593      	str	r3, [r2, #88]	; 0x58
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a39      	ldr	r2, [pc, #228]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d6:	f7fd fb09 	bl	80029ec <HAL_GetTick>
 80053da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053dc:	e009      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053de:	f7fd fb05 	bl	80029ec <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d902      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	74fb      	strb	r3, [r7, #19]
        break;
 80053f0:	e005      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f2:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ef      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d159      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005404:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01e      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	429a      	cmp	r2, r3
 800541e:	d019      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005420:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800544c:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545e:	f7fd fac5 	bl	80029ec <HAL_GetTick>
 8005462:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005464:	e00b      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fd fac1 	bl	80029ec <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d902      	bls.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	74fb      	strb	r3, [r7, #19]
            break;
 800547c:	e006      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ec      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005492:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	4903      	ldr	r1, [pc, #12]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054a8:	e008      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	74bb      	strb	r3, [r7, #18]
 80054ae:	e005      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054bc:	7c7b      	ldrb	r3, [r7, #17]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c2:	4ba7      	ldr	r3, [pc, #668]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	4aa6      	ldr	r2, [pc, #664]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054da:	4ba1      	ldr	r3, [pc, #644]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f023 0203 	bic.w	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	499d      	ldr	r1, [pc, #628]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054fc:	4b98      	ldr	r3, [pc, #608]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f023 020c 	bic.w	r2, r3, #12
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	4995      	ldr	r1, [pc, #596]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800551e:	4b90      	ldr	r3, [pc, #576]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	498c      	ldr	r1, [pc, #560]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005540:	4b87      	ldr	r3, [pc, #540]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	4984      	ldr	r1, [pc, #528]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005562:	4b7f      	ldr	r3, [pc, #508]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	497b      	ldr	r1, [pc, #492]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005584:	4b76      	ldr	r3, [pc, #472]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	4973      	ldr	r1, [pc, #460]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055a6:	4b6e      	ldr	r3, [pc, #440]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	496a      	ldr	r1, [pc, #424]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055c8:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4962      	ldr	r1, [pc, #392]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ea:	4b5d      	ldr	r3, [pc, #372]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	4959      	ldr	r1, [pc, #356]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800560c:	4b54      	ldr	r3, [pc, #336]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	4951      	ldr	r1, [pc, #324]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800562e:	4b4c      	ldr	r3, [pc, #304]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	4948      	ldr	r1, [pc, #288]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4940      	ldr	r1, [pc, #256]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	d105      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005670:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005688:	4b35      	ldr	r3, [pc, #212]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	4932      	ldr	r1, [pc, #200]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a6:	d105      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a8:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056c0:	4b27      	ldr	r3, [pc, #156]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4924      	ldr	r1, [pc, #144]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056de:	d105      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	4916      	ldr	r1, [pc, #88]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a10      	ldr	r2, [pc, #64]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	4908      	ldr	r1, [pc, #32]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574e:	d109      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a02      	ldr	r2, [pc, #8]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
 800575c:	e002      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d015      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	4926      	ldr	r1, [pc, #152]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057a8:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	4918      	ldr	r1, [pc, #96]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a12      	ldr	r2, [pc, #72]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d015      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ee:	490a      	ldr	r1, [pc, #40]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a04      	ldr	r2, [pc, #16]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800580a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800580c:	7cbb      	ldrb	r3, [r7, #18]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000

0800581c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e049      	b.n	80058c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fe0c 	bl	8002460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f001 f86e 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d001      	beq.n	80058e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e04c      	b.n	800597e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a26      	ldr	r2, [pc, #152]	; (800598c <HAL_TIM_Base_Start+0xc0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fe:	d01d      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_TIM_Base_Start+0xc4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a21      	ldr	r2, [pc, #132]	; (8005994 <HAL_TIM_Base_Start+0xc8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <HAL_TIM_Base_Start+0xcc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1e      	ldr	r2, [pc, #120]	; (800599c <HAL_TIM_Base_Start+0xd0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_TIM_Base_Start+0xd4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_Base_Start+0x70>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIM_Base_Start+0xd8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d115      	bne.n	8005968 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <HAL_TIM_Base_Start+0xdc>)
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b06      	cmp	r3, #6
 800594c:	d015      	beq.n	800597a <HAL_TIM_Base_Start+0xae>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d011      	beq.n	800597a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e008      	b.n	800597a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e000      	b.n	800597c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40013400 	.word	0x40013400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40015000 	.word	0x40015000
 80059a8:	00010007 	.word	0x00010007

080059ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e054      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <HAL_TIM_Base_Start_IT+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d01d      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_TIM_Base_Start_IT+0xd4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIM_Base_Start_IT+0xe0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d115      	bne.n	8005a58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_TIM_Base_Start_IT+0xec>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d015      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d011      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	e008      	b.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40015000 	.word	0x40015000
 8005a98:	00010007 	.word	0x00010007

08005a9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e049      	b.n	8005b42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc fd88 	bl	80025d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 ff2e 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_TIM_PWM_Start+0x24>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	bf14      	ite	ne
 8005b68:	2301      	movne	r3, #1
 8005b6a:	2300      	moveq	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	e03c      	b.n	8005bea <HAL_TIM_PWM_Start+0x9e>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d109      	bne.n	8005b8a <HAL_TIM_PWM_Start+0x3e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	e02f      	b.n	8005bea <HAL_TIM_PWM_Start+0x9e>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d109      	bne.n	8005ba4 <HAL_TIM_PWM_Start+0x58>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	bf14      	ite	ne
 8005b9c:	2301      	movne	r3, #1
 8005b9e:	2300      	moveq	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	e022      	b.n	8005bea <HAL_TIM_PWM_Start+0x9e>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b0c      	cmp	r3, #12
 8005ba8:	d109      	bne.n	8005bbe <HAL_TIM_PWM_Start+0x72>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	bf14      	ite	ne
 8005bb6:	2301      	movne	r3, #1
 8005bb8:	2300      	moveq	r3, #0
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	e015      	b.n	8005bea <HAL_TIM_PWM_Start+0x9e>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d109      	bne.n	8005bd8 <HAL_TIM_PWM_Start+0x8c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	e008      	b.n	8005bea <HAL_TIM_PWM_Start+0x9e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0a6      	b.n	8005d40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_PWM_Start+0xb6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c00:	e023      	b.n	8005c4a <HAL_TIM_PWM_Start+0xfe>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Start+0xc6>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c10:	e01b      	b.n	8005c4a <HAL_TIM_PWM_Start+0xfe>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_PWM_Start+0xd6>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	e013      	b.n	8005c4a <HAL_TIM_PWM_Start+0xfe>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_PWM_Start+0xe6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c30:	e00b      	b.n	8005c4a <HAL_TIM_PWM_Start+0xfe>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Start+0xf6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c40:	e003      	b.n	8005c4a <HAL_TIM_PWM_Start+0xfe>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fc16 	bl	8007484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <HAL_TIM_PWM_Start+0x1fc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d018      	beq.n	8005c94 <HAL_TIM_PWM_Start+0x148>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a39      	ldr	r2, [pc, #228]	; (8005d4c <HAL_TIM_PWM_Start+0x200>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <HAL_TIM_PWM_Start+0x148>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <HAL_TIM_PWM_Start+0x204>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <HAL_TIM_PWM_Start+0x148>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <HAL_TIM_PWM_Start+0x208>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_TIM_PWM_Start+0x148>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <HAL_TIM_PWM_Start+0x20c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_TIM_PWM_Start+0x148>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a33      	ldr	r2, [pc, #204]	; (8005d5c <HAL_TIM_PWM_Start+0x210>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <HAL_TIM_PWM_Start+0x14c>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <HAL_TIM_PWM_Start+0x14e>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <HAL_TIM_PWM_Start+0x1fc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d022      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d01d      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <HAL_TIM_PWM_Start+0x214>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d018      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <HAL_TIM_PWM_Start+0x218>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a23      	ldr	r2, [pc, #140]	; (8005d68 <HAL_TIM_PWM_Start+0x21c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <HAL_TIM_PWM_Start+0x200>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <HAL_TIM_PWM_Start+0x204>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <HAL_TIM_PWM_Start+0x210>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d115      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <HAL_TIM_PWM_Start+0x220>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b06      	cmp	r3, #6
 8005d0e:	d015      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x1f0>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d16:	d011      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	e008      	b.n	8005d3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e000      	b.n	8005d3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40014400 	.word	0x40014400
 8005d58:	40014800 	.word	0x40014800
 8005d5c:	40015000 	.word	0x40015000
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	00010007 	.word	0x00010007

08005d70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e049      	b.n	8005e16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f841 	bl	8005e1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f000 fdc4 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_IC_Start_IT+0x1e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e023      	b.n	8005e9a <HAL_TIM_IC_Start_IT+0x66>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_IC_Start_IT+0x2e>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	e01b      	b.n	8005e9a <HAL_TIM_IC_Start_IT+0x66>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_IC_Start_IT+0x3e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	e013      	b.n	8005e9a <HAL_TIM_IC_Start_IT+0x66>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b0c      	cmp	r3, #12
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_IC_Start_IT+0x4e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	e00b      	b.n	8005e9a <HAL_TIM_IC_Start_IT+0x66>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_IC_Start_IT+0x5e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	e003      	b.n	8005e9a <HAL_TIM_IC_Start_IT+0x66>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_TIM_IC_Start_IT+0x78>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e013      	b.n	8005ed4 <HAL_TIM_IC_Start_IT+0xa0>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d104      	bne.n	8005ebc <HAL_TIM_IC_Start_IT+0x88>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	e00b      	b.n	8005ed4 <HAL_TIM_IC_Start_IT+0xa0>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d104      	bne.n	8005ecc <HAL_TIM_IC_Start_IT+0x98>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	e003      	b.n	8005ed4 <HAL_TIM_IC_Start_IT+0xa0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005edc:	7b7b      	ldrb	r3, [r7, #13]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d001      	beq.n	8005ee6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0e2      	b.n	80060ac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_IC_Start_IT+0xc2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef4:	e023      	b.n	8005f3e <HAL_TIM_IC_Start_IT+0x10a>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_IC_Start_IT+0xd2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f04:	e01b      	b.n	8005f3e <HAL_TIM_IC_Start_IT+0x10a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_IC_Start_IT+0xe2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f14:	e013      	b.n	8005f3e <HAL_TIM_IC_Start_IT+0x10a>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_IC_Start_IT+0xf2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f24:	e00b      	b.n	8005f3e <HAL_TIM_IC_Start_IT+0x10a>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d104      	bne.n	8005f36 <HAL_TIM_IC_Start_IT+0x102>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f34:	e003      	b.n	8005f3e <HAL_TIM_IC_Start_IT+0x10a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_IC_Start_IT+0x11a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4c:	e013      	b.n	8005f76 <HAL_TIM_IC_Start_IT+0x142>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_IC_Start_IT+0x12a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f5c:	e00b      	b.n	8005f76 <HAL_TIM_IC_Start_IT+0x142>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_IC_Start_IT+0x13a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f6c:	e003      	b.n	8005f76 <HAL_TIM_IC_Start_IT+0x142>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b0c      	cmp	r3, #12
 8005f7a:	d841      	bhi.n	8006000 <HAL_TIM_IC_Start_IT+0x1cc>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <HAL_TIM_IC_Start_IT+0x150>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08006001 	.word	0x08006001
 8005f8c:	08006001 	.word	0x08006001
 8005f90:	08006001 	.word	0x08006001
 8005f94:	08005fcb 	.word	0x08005fcb
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	08006001 	.word	0x08006001
 8005fa4:	08005fdd 	.word	0x08005fdd
 8005fa8:	08006001 	.word	0x08006001
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08006001 	.word	0x08006001
 8005fb4:	08005fef 	.word	0x08005fef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0202 	orr.w	r2, r2, #2
 8005fc6:	60da      	str	r2, [r3, #12]
      break;
 8005fc8:	e01d      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0204 	orr.w	r2, r2, #4
 8005fd8:	60da      	str	r2, [r3, #12]
      break;
 8005fda:	e014      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	60da      	str	r2, [r3, #12]
      break;
 8005fec:	e00b      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0210 	orr.w	r2, r2, #16
 8005ffc:	60da      	str	r2, [r3, #12]
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	bf00      	nop
  }

  if (status == HAL_OK)
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d14e      	bne.n	80060aa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2201      	movs	r2, #1
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f001 fa35 	bl	8007484 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_TIM_IC_Start_IT+0x280>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602c:	d01d      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <HAL_TIM_IC_Start_IT+0x284>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <HAL_TIM_IC_Start_IT+0x288>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_TIM_IC_Start_IT+0x28c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <HAL_TIM_IC_Start_IT+0x290>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_TIM_IC_Start_IT+0x294>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x236>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <HAL_TIM_IC_Start_IT+0x298>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d115      	bne.n	8006096 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <HAL_TIM_IC_Start_IT+0x29c>)
 8006072:	4013      	ands	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b06      	cmp	r3, #6
 800607a:	d015      	beq.n	80060a8 <HAL_TIM_IC_Start_IT+0x274>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006082:	d011      	beq.n	80060a8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	e008      	b.n	80060a8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e000      	b.n	80060aa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40015000 	.word	0x40015000
 80060d0:	00010007 	.word	0x00010007

080060d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d020      	beq.n	8006138 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0202 	mvn.w	r2, #2
 8006108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fb fe70 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fbea 	bl	8006900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fbf1 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d020      	beq.n	8006184 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0204 	mvn.w	r2, #4
 8006154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fe4a 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fbc4 	bl	8006900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fbcb 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d020      	beq.n	80061d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01b      	beq.n	80061d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0208 	mvn.w	r2, #8
 80061a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2204      	movs	r2, #4
 80061a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb fe24 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 80061bc:	e005      	b.n	80061ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb9e 	bl	8006900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fba5 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d020      	beq.n	800621c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01b      	beq.n	800621c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0210 	mvn.w	r2, #16
 80061ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2208      	movs	r2, #8
 80061f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb fdfe 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8006208:	e005      	b.n	8006216 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fb78 	bl	8006900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fb7f 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0201 	mvn.w	r2, #1
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fb fdfa 	bl	8001e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 fa65 	bl	8007738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 fa5d 	bl	800774c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb39 	bl	8006928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0220 	mvn.w	r2, #32
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fa25 	bl	8007724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fa31 	bl	8007760 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800631a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fa29 	bl	8007774 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800633e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fa21 	bl	8007788 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 fa19 	bl	800779c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_TIM_IC_ConfigChannel+0x1e>
 800638c:	2302      	movs	r3, #2
 800638e:	e088      	b.n	80064a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11b      	bne.n	80063d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063ae:	f000 fea3 	bl	80070f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 020c 	bic.w	r2, r2, #12
 80063c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6999      	ldr	r1, [r3, #24]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	619a      	str	r2, [r3, #24]
 80063d4:	e060      	b.n	8006498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11c      	bne.n	8006416 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80063ec:	f000 ff27 	bl	800723e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6999      	ldr	r1, [r3, #24]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	021a      	lsls	r2, r3, #8
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	619a      	str	r2, [r3, #24]
 8006414:	e040      	b.n	8006498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d11b      	bne.n	8006454 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800642c:	f000 ff74 	bl	8007318 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 020c 	bic.w	r2, r2, #12
 800643e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69d9      	ldr	r1, [r3, #28]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	61da      	str	r2, [r3, #28]
 8006452:	e021      	b.n	8006498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d11c      	bne.n	8006494 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800646a:	f000 ff91 	bl	8007390 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800647c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
 8006492:	e001      	b.n	8006498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e0ff      	b.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b14      	cmp	r3, #20
 80064d6:	f200 80f0 	bhi.w	80066ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080066bb 	.word	0x080066bb
 80064e8:	080066bb 	.word	0x080066bb
 80064ec:	080066bb 	.word	0x080066bb
 80064f0:	08006575 	.word	0x08006575
 80064f4:	080066bb 	.word	0x080066bb
 80064f8:	080066bb 	.word	0x080066bb
 80064fc:	080066bb 	.word	0x080066bb
 8006500:	080065b7 	.word	0x080065b7
 8006504:	080066bb 	.word	0x080066bb
 8006508:	080066bb 	.word	0x080066bb
 800650c:	080066bb 	.word	0x080066bb
 8006510:	080065f7 	.word	0x080065f7
 8006514:	080066bb 	.word	0x080066bb
 8006518:	080066bb 	.word	0x080066bb
 800651c:	080066bb 	.word	0x080066bb
 8006520:	08006639 	.word	0x08006639
 8006524:	080066bb 	.word	0x080066bb
 8006528:	080066bb 	.word	0x080066bb
 800652c:	080066bb 	.word	0x080066bb
 8006530:	08006679 	.word	0x08006679
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fab2 	bl	8006aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0208 	orr.w	r2, r2, #8
 800654e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0204 	bic.w	r2, r2, #4
 800655e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6999      	ldr	r1, [r3, #24]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	619a      	str	r2, [r3, #24]
      break;
 8006572:	e0a5      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fb2c 	bl	8006bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800658e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6999      	ldr	r1, [r3, #24]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	021a      	lsls	r2, r3, #8
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	619a      	str	r2, [r3, #24]
      break;
 80065b4:	e084      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fb9f 	bl	8006d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0208 	orr.w	r2, r2, #8
 80065d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0204 	bic.w	r2, r2, #4
 80065e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69d9      	ldr	r1, [r3, #28]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	61da      	str	r2, [r3, #28]
      break;
 80065f4:	e064      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fc11 	bl	8006e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69d9      	ldr	r1, [r3, #28]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	021a      	lsls	r2, r3, #8
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	61da      	str	r2, [r3, #28]
      break;
 8006636:	e043      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fc84 	bl	8006f4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0204 	bic.w	r2, r2, #4
 8006662:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006676:	e023      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fcce 	bl	8007020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006692:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066b8:	e002      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
      break;
 80066be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop

080066d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e0f6      	b.n	80068de <HAL_TIM_ConfigClockSource+0x20a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800670e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800671a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6f      	ldr	r2, [pc, #444]	; (80068e8 <HAL_TIM_ConfigClockSource+0x214>)
 800672a:	4293      	cmp	r3, r2
 800672c:	f000 80c1 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006730:	4a6d      	ldr	r2, [pc, #436]	; (80068e8 <HAL_TIM_ConfigClockSource+0x214>)
 8006732:	4293      	cmp	r3, r2
 8006734:	f200 80c6 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006738:	4a6c      	ldr	r2, [pc, #432]	; (80068ec <HAL_TIM_ConfigClockSource+0x218>)
 800673a:	4293      	cmp	r3, r2
 800673c:	f000 80b9 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006740:	4a6a      	ldr	r2, [pc, #424]	; (80068ec <HAL_TIM_ConfigClockSource+0x218>)
 8006742:	4293      	cmp	r3, r2
 8006744:	f200 80be 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006748:	4a69      	ldr	r2, [pc, #420]	; (80068f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	f000 80b1 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006750:	4a67      	ldr	r2, [pc, #412]	; (80068f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	f200 80b6 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006758:	4a66      	ldr	r2, [pc, #408]	; (80068f4 <HAL_TIM_ConfigClockSource+0x220>)
 800675a:	4293      	cmp	r3, r2
 800675c:	f000 80a9 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006760:	4a64      	ldr	r2, [pc, #400]	; (80068f4 <HAL_TIM_ConfigClockSource+0x220>)
 8006762:	4293      	cmp	r3, r2
 8006764:	f200 80ae 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006768:	4a63      	ldr	r2, [pc, #396]	; (80068f8 <HAL_TIM_ConfigClockSource+0x224>)
 800676a:	4293      	cmp	r3, r2
 800676c:	f000 80a1 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006770:	4a61      	ldr	r2, [pc, #388]	; (80068f8 <HAL_TIM_ConfigClockSource+0x224>)
 8006772:	4293      	cmp	r3, r2
 8006774:	f200 80a6 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006778:	4a60      	ldr	r2, [pc, #384]	; (80068fc <HAL_TIM_ConfigClockSource+0x228>)
 800677a:	4293      	cmp	r3, r2
 800677c:	f000 8099 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006780:	4a5e      	ldr	r2, [pc, #376]	; (80068fc <HAL_TIM_ConfigClockSource+0x228>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f200 809e 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006788:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800678c:	f000 8091 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 8006790:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006794:	f200 8096 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679c:	f000 8089 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 80067a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a4:	f200 808e 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ac:	d03e      	beq.n	800682c <HAL_TIM_ConfigClockSource+0x158>
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b2:	f200 8087 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ba:	f000 8086 	beq.w	80068ca <HAL_TIM_ConfigClockSource+0x1f6>
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c2:	d87f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067c4:	2b70      	cmp	r3, #112	; 0x70
 80067c6:	d01a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x12a>
 80067c8:	2b70      	cmp	r3, #112	; 0x70
 80067ca:	d87b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067cc:	2b60      	cmp	r3, #96	; 0x60
 80067ce:	d050      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x19e>
 80067d0:	2b60      	cmp	r3, #96	; 0x60
 80067d2:	d877      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d4:	2b50      	cmp	r3, #80	; 0x50
 80067d6:	d03c      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x17e>
 80067d8:	2b50      	cmp	r3, #80	; 0x50
 80067da:	d873      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d058      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x1be>
 80067e0:	2b40      	cmp	r3, #64	; 0x40
 80067e2:	d86f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e4:	2b30      	cmp	r3, #48	; 0x30
 80067e6:	d064      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	d86b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d060      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d867      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d05a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1de>
 80067fc:	e062      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800680e:	f000 fe19 	bl	8007444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e04f      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	f000 fe02 	bl	8007444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800684e:	609a      	str	r2, [r3, #8]
      break;
 8006850:	e03c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	461a      	mov	r2, r3
 8006860:	f000 fcbe 	bl	80071e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2150      	movs	r1, #80	; 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fdcd 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 8006870:	e02c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800687e:	461a      	mov	r2, r3
 8006880:	f000 fd1a 	bl	80072b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2160      	movs	r1, #96	; 0x60
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fdbd 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 8006890:	e01c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fc9e 	bl	80071e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fdad 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 80068b0:	e00c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f000 fda4 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 80068c2:	e003      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e000      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80068ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	00100070 	.word	0x00100070
 80068ec:	00100060 	.word	0x00100060
 80068f0:	00100050 	.word	0x00100050
 80068f4:	00100040 	.word	0x00100040
 80068f8:	00100030 	.word	0x00100030
 80068fc:	00100020 	.word	0x00100020

08006900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a4c      	ldr	r2, [pc, #304]	; (8006a80 <TIM_Base_SetConfig+0x144>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d017      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d013      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a49      	ldr	r2, [pc, #292]	; (8006a84 <TIM_Base_SetConfig+0x148>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a48      	ldr	r2, [pc, #288]	; (8006a88 <TIM_Base_SetConfig+0x14c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a47      	ldr	r2, [pc, #284]	; (8006a8c <TIM_Base_SetConfig+0x150>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a46      	ldr	r2, [pc, #280]	; (8006a90 <TIM_Base_SetConfig+0x154>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a45      	ldr	r2, [pc, #276]	; (8006a94 <TIM_Base_SetConfig+0x158>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a39      	ldr	r2, [pc, #228]	; (8006a80 <TIM_Base_SetConfig+0x144>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d023      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d01f      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a36      	ldr	r2, [pc, #216]	; (8006a84 <TIM_Base_SetConfig+0x148>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01b      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a35      	ldr	r2, [pc, #212]	; (8006a88 <TIM_Base_SetConfig+0x14c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d017      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a34      	ldr	r2, [pc, #208]	; (8006a8c <TIM_Base_SetConfig+0x150>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a33      	ldr	r2, [pc, #204]	; (8006a90 <TIM_Base_SetConfig+0x154>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00f      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a33      	ldr	r2, [pc, #204]	; (8006a98 <TIM_Base_SetConfig+0x15c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00b      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a32      	ldr	r2, [pc, #200]	; (8006a9c <TIM_Base_SetConfig+0x160>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d007      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a31      	ldr	r2, [pc, #196]	; (8006aa0 <TIM_Base_SetConfig+0x164>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d003      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2c      	ldr	r2, [pc, #176]	; (8006a94 <TIM_Base_SetConfig+0x158>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d108      	bne.n	80069f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <TIM_Base_SetConfig+0x144>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <TIM_Base_SetConfig+0x154>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00f      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	; (8006a98 <TIM_Base_SetConfig+0x15c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <TIM_Base_SetConfig+0x160>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <TIM_Base_SetConfig+0x164>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <TIM_Base_SetConfig+0x158>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d103      	bne.n	8006a54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]
  }
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40013400 	.word	0x40013400
 8006a94:	40015000 	.word	0x40015000
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800

08006aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0201 	bic.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f023 0302 	bic.w	r3, r3, #2
 8006af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <TIM_OC1_SetConfig+0x11c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d013      	beq.n	8006b2c <TIM_OC1_SetConfig+0x88>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a2f      	ldr	r2, [pc, #188]	; (8006bc4 <TIM_OC1_SetConfig+0x120>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_OC1_SetConfig+0x88>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a2e      	ldr	r2, [pc, #184]	; (8006bc8 <TIM_OC1_SetConfig+0x124>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_OC1_SetConfig+0x88>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a2d      	ldr	r2, [pc, #180]	; (8006bcc <TIM_OC1_SetConfig+0x128>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_OC1_SetConfig+0x88>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <TIM_OC1_SetConfig+0x12c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC1_SetConfig+0x88>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <TIM_OC1_SetConfig+0x130>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d10c      	bne.n	8006b46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f023 0308 	bic.w	r3, r3, #8
 8006b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0304 	bic.w	r3, r3, #4
 8006b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <TIM_OC1_SetConfig+0x11c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <TIM_OC1_SetConfig+0xd2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <TIM_OC1_SetConfig+0x120>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00f      	beq.n	8006b76 <TIM_OC1_SetConfig+0xd2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <TIM_OC1_SetConfig+0x124>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <TIM_OC1_SetConfig+0xd2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <TIM_OC1_SetConfig+0x128>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d007      	beq.n	8006b76 <TIM_OC1_SetConfig+0xd2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <TIM_OC1_SetConfig+0x12c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC1_SetConfig+0xd2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <TIM_OC1_SetConfig+0x130>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d111      	bne.n	8006b9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40014400 	.word	0x40014400
 8006bd0:	40014800 	.word	0x40014800
 8006bd4:	40015000 	.word	0x40015000

08006bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f023 0210 	bic.w	r2, r3, #16
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0320 	bic.w	r3, r3, #32
 8006c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <TIM_OC2_SetConfig+0x110>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_OC2_SetConfig+0x74>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a2b      	ldr	r2, [pc, #172]	; (8006cec <TIM_OC2_SetConfig+0x114>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC2_SetConfig+0x74>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <TIM_OC2_SetConfig+0x118>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10d      	bne.n	8006c68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <TIM_OC2_SetConfig+0x110>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <TIM_OC2_SetConfig+0xc0>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <TIM_OC2_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC2_SetConfig+0xc0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <TIM_OC2_SetConfig+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC2_SetConfig+0xc0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <TIM_OC2_SetConfig+0x120>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC2_SetConfig+0xc0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <TIM_OC2_SetConfig+0x124>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC2_SetConfig+0xc0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <TIM_OC2_SetConfig+0x118>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d113      	bne.n	8006cc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40015000 	.word	0x40015000
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a2b      	ldr	r2, [pc, #172]	; (8006e0c <TIM_OC3_SetConfig+0x10c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d007      	beq.n	8006d72 <TIM_OC3_SetConfig+0x72>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2a      	ldr	r2, [pc, #168]	; (8006e10 <TIM_OC3_SetConfig+0x110>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_OC3_SetConfig+0x72>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a29      	ldr	r2, [pc, #164]	; (8006e14 <TIM_OC3_SetConfig+0x114>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10d      	bne.n	8006d8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1e      	ldr	r2, [pc, #120]	; (8006e0c <TIM_OC3_SetConfig+0x10c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <TIM_OC3_SetConfig+0xbe>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1d      	ldr	r2, [pc, #116]	; (8006e10 <TIM_OC3_SetConfig+0x110>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00f      	beq.n	8006dbe <TIM_OC3_SetConfig+0xbe>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <TIM_OC3_SetConfig+0x118>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00b      	beq.n	8006dbe <TIM_OC3_SetConfig+0xbe>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_OC3_SetConfig+0x11c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d007      	beq.n	8006dbe <TIM_OC3_SetConfig+0xbe>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <TIM_OC3_SetConfig+0x120>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d003      	beq.n	8006dbe <TIM_OC3_SetConfig+0xbe>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <TIM_OC3_SetConfig+0x114>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d113      	bne.n	8006de6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	621a      	str	r2, [r3, #32]
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40013400 	.word	0x40013400
 8006e14:	40015000 	.word	0x40015000
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800

08006e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a2c      	ldr	r2, [pc, #176]	; (8006f34 <TIM_OC4_SetConfig+0x110>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_OC4_SetConfig+0x74>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2b      	ldr	r2, [pc, #172]	; (8006f38 <TIM_OC4_SetConfig+0x114>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC4_SetConfig+0x74>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <TIM_OC4_SetConfig+0x118>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d10d      	bne.n	8006eb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	031b      	lsls	r3, r3, #12
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <TIM_OC4_SetConfig+0x110>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d013      	beq.n	8006ee4 <TIM_OC4_SetConfig+0xc0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1e      	ldr	r2, [pc, #120]	; (8006f38 <TIM_OC4_SetConfig+0x114>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00f      	beq.n	8006ee4 <TIM_OC4_SetConfig+0xc0>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <TIM_OC4_SetConfig+0x11c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00b      	beq.n	8006ee4 <TIM_OC4_SetConfig+0xc0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <TIM_OC4_SetConfig+0x120>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d007      	beq.n	8006ee4 <TIM_OC4_SetConfig+0xc0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <TIM_OC4_SetConfig+0x124>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_OC4_SetConfig+0xc0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a17      	ldr	r2, [pc, #92]	; (8006f3c <TIM_OC4_SetConfig+0x118>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d113      	bne.n	8006f0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ef2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	019b      	lsls	r3, r3, #6
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	019b      	lsls	r3, r3, #6
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40013400 	.word	0x40013400
 8006f3c:	40015000 	.word	0x40015000
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	041b      	lsls	r3, r3, #16
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <TIM_OC5_SetConfig+0xbc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <TIM_OC5_SetConfig+0x82>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a18      	ldr	r2, [pc, #96]	; (800700c <TIM_OC5_SetConfig+0xc0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00f      	beq.n	8006fce <TIM_OC5_SetConfig+0x82>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a17      	ldr	r2, [pc, #92]	; (8007010 <TIM_OC5_SetConfig+0xc4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00b      	beq.n	8006fce <TIM_OC5_SetConfig+0x82>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a16      	ldr	r2, [pc, #88]	; (8007014 <TIM_OC5_SetConfig+0xc8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <TIM_OC5_SetConfig+0x82>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <TIM_OC5_SetConfig+0xcc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d003      	beq.n	8006fce <TIM_OC5_SetConfig+0x82>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <TIM_OC5_SetConfig+0xd0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d109      	bne.n	8006fe2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	621a      	str	r2, [r3, #32]
}
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800
 800701c:	40015000 	.word	0x40015000

08007020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	051b      	lsls	r3, r3, #20
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1a      	ldr	r2, [pc, #104]	; (80070e0 <TIM_OC6_SetConfig+0xc0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <TIM_OC6_SetConfig+0x84>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <TIM_OC6_SetConfig+0xc4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00f      	beq.n	80070a4 <TIM_OC6_SetConfig+0x84>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <TIM_OC6_SetConfig+0xc8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00b      	beq.n	80070a4 <TIM_OC6_SetConfig+0x84>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <TIM_OC6_SetConfig+0xcc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d007      	beq.n	80070a4 <TIM_OC6_SetConfig+0x84>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <TIM_OC6_SetConfig+0xd0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d003      	beq.n	80070a4 <TIM_OC6_SetConfig+0x84>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <TIM_OC6_SetConfig+0xd4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d109      	bne.n	80070b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	029b      	lsls	r3, r3, #10
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40013400 	.word	0x40013400
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800
 80070f4:	40015000 	.word	0x40015000

080070f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f023 0201 	bic.w	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a28      	ldr	r2, [pc, #160]	; (80071c4 <TIM_TI1_SetConfig+0xcc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01b      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d017      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <TIM_TI1_SetConfig+0xd0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a24      	ldr	r2, [pc, #144]	; (80071cc <TIM_TI1_SetConfig+0xd4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00f      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <TIM_TI1_SetConfig+0xd8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <TIM_TI1_SetConfig+0xdc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d007      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <TIM_TI1_SetConfig+0xe0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_TI1_SetConfig+0x66>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a20      	ldr	r2, [pc, #128]	; (80071dc <TIM_TI1_SetConfig+0xe4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d101      	bne.n	8007162 <TIM_TI1_SetConfig+0x6a>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <TIM_TI1_SetConfig+0x6c>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e003      	b.n	8007182 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	b2db      	uxtb	r3, r3
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f023 030a 	bic.w	r3, r3, #10
 800719c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f003 030a 	and.w	r3, r3, #10
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40012c00 	.word	0x40012c00
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40015000 	.word	0x40015000

080071e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0201 	bic.w	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800720a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f023 030a 	bic.w	r3, r3, #10
 800721c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800723e:	b480      	push	{r7}
 8007240:	b087      	sub	sp, #28
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0210 	bic.w	r2, r3, #16
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	b29b      	uxth	r3, r3
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	621a      	str	r2, [r3, #32]
}
 80072ac:	bf00      	nop
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0210 	bic.w	r2, r3, #16
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	031b      	lsls	r3, r3, #12
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	621a      	str	r2, [r3, #32]
}
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007354:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	b2db      	uxtb	r3, r3
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007368:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	621a      	str	r2, [r3, #32]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	031b      	lsls	r3, r3, #12
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	031b      	lsls	r3, r3, #12
 80073e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	f043 0307 	orr.w	r3, r3, #7
 8007430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	021a      	lsls	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	431a      	orrs	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4313      	orrs	r3, r2
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2201      	movs	r2, #1
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1a      	ldr	r2, [r3, #32]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	401a      	ands	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a1a      	ldr	r2, [r3, #32]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	431a      	orrs	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e074      	b.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a34      	ldr	r2, [pc, #208]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a33      	ldr	r2, [pc, #204]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a31      	ldr	r2, [pc, #196]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800752c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a21      	ldr	r2, [pc, #132]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d022      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007568:	d01d      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1f      	ldr	r2, [pc, #124]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d018      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00e      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d009      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d004      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a11      	ldr	r2, [pc, #68]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d10c      	bne.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40013400 	.word	0x40013400
 80075e8:	40015000 	.word	0x40015000
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800
 80075f4:	40000c00 	.word	0x40000c00
 80075f8:	40014000 	.word	0x40014000

080075fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007614:	2302      	movs	r3, #2
 8007616:	e078      	b.n	800770a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1c      	ldr	r2, [pc, #112]	; (8007718 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1b      	ldr	r2, [pc, #108]	; (800771c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a19      	ldr	r2, [pc, #100]	; (8007720 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d11c      	bne.n	80076f8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	051b      	lsls	r3, r3, #20
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40012c00 	.word	0x40012c00
 800771c:	40013400 	.word	0x40013400
 8007720:	40015000 	.word	0x40015000

08007724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e042      	b.n	8007848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fa ffc7 	bl	8002768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2224      	movs	r2, #36	; 0x24
 80077de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0201 	bic.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fb24 	bl	8007e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f825 	bl	8007850 <UART_SetConfig>
 8007806:	4603      	mov	r3, r0
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e01b      	b.n	8007848 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800781e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800782e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0201 	orr.w	r2, r2, #1
 800783e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fba3 	bl	8007f8c <UART_CheckIdleState>
 8007846:	4603      	mov	r3, r0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007854:	b08c      	sub	sp, #48	; 0x30
 8007856:	af00      	add	r7, sp, #0
 8007858:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	431a      	orrs	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	431a      	orrs	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	4313      	orrs	r3, r2
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	4baa      	ldr	r3, [pc, #680]	; (8007b28 <UART_SetConfig+0x2d8>)
 8007880:	4013      	ands	r3, r2
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007888:	430b      	orrs	r3, r1
 800788a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a9f      	ldr	r2, [pc, #636]	; (8007b2c <UART_SetConfig+0x2dc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b8:	4313      	orrs	r3, r2
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80078c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078d0:	430b      	orrs	r3, r1
 80078d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	f023 010f 	bic.w	r1, r3, #15
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a90      	ldr	r2, [pc, #576]	; (8007b30 <UART_SetConfig+0x2e0>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d125      	bne.n	8007940 <UART_SetConfig+0xf0>
 80078f4:	4b8f      	ldr	r3, [pc, #572]	; (8007b34 <UART_SetConfig+0x2e4>)
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d81a      	bhi.n	8007938 <UART_SetConfig+0xe8>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0xb8>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007919 	.word	0x08007919
 800790c:	08007929 	.word	0x08007929
 8007910:	08007921 	.word	0x08007921
 8007914:	08007931 	.word	0x08007931
 8007918:	2301      	movs	r3, #1
 800791a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800791e:	e116      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007920:	2302      	movs	r3, #2
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007926:	e112      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800792e:	e10e      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007936:	e10a      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800793e:	e106      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a7c      	ldr	r2, [pc, #496]	; (8007b38 <UART_SetConfig+0x2e8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d138      	bne.n	80079bc <UART_SetConfig+0x16c>
 800794a:	4b7a      	ldr	r3, [pc, #488]	; (8007b34 <UART_SetConfig+0x2e4>)
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f003 030c 	and.w	r3, r3, #12
 8007954:	2b0c      	cmp	r3, #12
 8007956:	d82d      	bhi.n	80079b4 <UART_SetConfig+0x164>
 8007958:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <UART_SetConfig+0x110>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007995 	.word	0x08007995
 8007964:	080079b5 	.word	0x080079b5
 8007968:	080079b5 	.word	0x080079b5
 800796c:	080079b5 	.word	0x080079b5
 8007970:	080079a5 	.word	0x080079a5
 8007974:	080079b5 	.word	0x080079b5
 8007978:	080079b5 	.word	0x080079b5
 800797c:	080079b5 	.word	0x080079b5
 8007980:	0800799d 	.word	0x0800799d
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079b5 	.word	0x080079b5
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079ad 	.word	0x080079ad
 8007994:	2300      	movs	r3, #0
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800799a:	e0d8      	b.n	8007b4e <UART_SetConfig+0x2fe>
 800799c:	2302      	movs	r3, #2
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079a2:	e0d4      	b.n	8007b4e <UART_SetConfig+0x2fe>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079aa:	e0d0      	b.n	8007b4e <UART_SetConfig+0x2fe>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079b2:	e0cc      	b.n	8007b4e <UART_SetConfig+0x2fe>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ba:	e0c8      	b.n	8007b4e <UART_SetConfig+0x2fe>
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a5e      	ldr	r2, [pc, #376]	; (8007b3c <UART_SetConfig+0x2ec>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d125      	bne.n	8007a12 <UART_SetConfig+0x1c2>
 80079c6:	4b5b      	ldr	r3, [pc, #364]	; (8007b34 <UART_SetConfig+0x2e4>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079d0:	2b30      	cmp	r3, #48	; 0x30
 80079d2:	d016      	beq.n	8007a02 <UART_SetConfig+0x1b2>
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d818      	bhi.n	8007a0a <UART_SetConfig+0x1ba>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d00a      	beq.n	80079f2 <UART_SetConfig+0x1a2>
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d814      	bhi.n	8007a0a <UART_SetConfig+0x1ba>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <UART_SetConfig+0x19a>
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d008      	beq.n	80079fa <UART_SetConfig+0x1aa>
 80079e8:	e00f      	b.n	8007a0a <UART_SetConfig+0x1ba>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079f0:	e0ad      	b.n	8007b4e <UART_SetConfig+0x2fe>
 80079f2:	2302      	movs	r3, #2
 80079f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079f8:	e0a9      	b.n	8007b4e <UART_SetConfig+0x2fe>
 80079fa:	2304      	movs	r3, #4
 80079fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a00:	e0a5      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a02:	2308      	movs	r3, #8
 8007a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a08:	e0a1      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a10:	e09d      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a4a      	ldr	r2, [pc, #296]	; (8007b40 <UART_SetConfig+0x2f0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d125      	bne.n	8007a68 <UART_SetConfig+0x218>
 8007a1c:	4b45      	ldr	r3, [pc, #276]	; (8007b34 <UART_SetConfig+0x2e4>)
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a26:	2bc0      	cmp	r3, #192	; 0xc0
 8007a28:	d016      	beq.n	8007a58 <UART_SetConfig+0x208>
 8007a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a2c:	d818      	bhi.n	8007a60 <UART_SetConfig+0x210>
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d00a      	beq.n	8007a48 <UART_SetConfig+0x1f8>
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d814      	bhi.n	8007a60 <UART_SetConfig+0x210>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <UART_SetConfig+0x1f0>
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d008      	beq.n	8007a50 <UART_SetConfig+0x200>
 8007a3e:	e00f      	b.n	8007a60 <UART_SetConfig+0x210>
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a46:	e082      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a4e:	e07e      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a50:	2304      	movs	r3, #4
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a56:	e07a      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a58:	2308      	movs	r3, #8
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a5e:	e076      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a60:	2310      	movs	r3, #16
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a66:	e072      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a35      	ldr	r2, [pc, #212]	; (8007b44 <UART_SetConfig+0x2f4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d12a      	bne.n	8007ac8 <UART_SetConfig+0x278>
 8007a72:	4b30      	ldr	r3, [pc, #192]	; (8007b34 <UART_SetConfig+0x2e4>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a80:	d01a      	beq.n	8007ab8 <UART_SetConfig+0x268>
 8007a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a86:	d81b      	bhi.n	8007ac0 <UART_SetConfig+0x270>
 8007a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8c:	d00c      	beq.n	8007aa8 <UART_SetConfig+0x258>
 8007a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a92:	d815      	bhi.n	8007ac0 <UART_SetConfig+0x270>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <UART_SetConfig+0x250>
 8007a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9c:	d008      	beq.n	8007ab0 <UART_SetConfig+0x260>
 8007a9e:	e00f      	b.n	8007ac0 <UART_SetConfig+0x270>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa6:	e052      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aae:	e04e      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab6:	e04a      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007abe:	e046      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ac6:	e042      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <UART_SetConfig+0x2dc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d13a      	bne.n	8007b48 <UART_SetConfig+0x2f8>
 8007ad2:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <UART_SetConfig+0x2e4>)
 8007ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae0:	d01a      	beq.n	8007b18 <UART_SetConfig+0x2c8>
 8007ae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae6:	d81b      	bhi.n	8007b20 <UART_SetConfig+0x2d0>
 8007ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aec:	d00c      	beq.n	8007b08 <UART_SetConfig+0x2b8>
 8007aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af2:	d815      	bhi.n	8007b20 <UART_SetConfig+0x2d0>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <UART_SetConfig+0x2b0>
 8007af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007afc:	d008      	beq.n	8007b10 <UART_SetConfig+0x2c0>
 8007afe:	e00f      	b.n	8007b20 <UART_SetConfig+0x2d0>
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b06:	e022      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0e:	e01e      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007b10:	2304      	movs	r3, #4
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b16:	e01a      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007b18:	2308      	movs	r3, #8
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1e:	e016      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007b20:	2310      	movs	r3, #16
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b26:	e012      	b.n	8007b4e <UART_SetConfig+0x2fe>
 8007b28:	cfff69f3 	.word	0xcfff69f3
 8007b2c:	40008000 	.word	0x40008000
 8007b30:	40013800 	.word	0x40013800
 8007b34:	40021000 	.word	0x40021000
 8007b38:	40004400 	.word	0x40004400
 8007b3c:	40004800 	.word	0x40004800
 8007b40:	40004c00 	.word	0x40004c00
 8007b44:	40005000 	.word	0x40005000
 8007b48:	2310      	movs	r3, #16
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4aae      	ldr	r2, [pc, #696]	; (8007e0c <UART_SetConfig+0x5bc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	f040 8097 	bne.w	8007c88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d823      	bhi.n	8007baa <UART_SetConfig+0x35a>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <UART_SetConfig+0x318>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b8d 	.word	0x08007b8d
 8007b6c:	08007bab 	.word	0x08007bab
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007bab 	.word	0x08007bab
 8007b78:	08007b9b 	.word	0x08007b9b
 8007b7c:	08007bab 	.word	0x08007bab
 8007b80:	08007bab 	.word	0x08007bab
 8007b84:	08007bab 	.word	0x08007bab
 8007b88:	08007ba3 	.word	0x08007ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8c:	f7fd fb86 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b92:	e010      	b.n	8007bb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b94:	4b9e      	ldr	r3, [pc, #632]	; (8007e10 <UART_SetConfig+0x5c0>)
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b98:	e00d      	b.n	8007bb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b9a:	f7fd fb11 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8007b9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ba0:	e009      	b.n	8007bb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ba8:	e005      	b.n	8007bb6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8130 	beq.w	8007e1e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	4a94      	ldr	r2, [pc, #592]	; (8007e14 <UART_SetConfig+0x5c4>)
 8007bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4413      	add	r3, r2
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d305      	bcc.n	8007bee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d903      	bls.n	8007bf6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007bf4:	e113      	b.n	8007e1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	60bb      	str	r3, [r7, #8]
 8007bfc:	60fa      	str	r2, [r7, #12]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	4a84      	ldr	r2, [pc, #528]	; (8007e14 <UART_SetConfig+0x5c4>)
 8007c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c18:	f7f8 ff3c 	bl	8000a94 <__aeabi_uldivmod>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	020b      	lsls	r3, r1, #8
 8007c2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c32:	0202      	lsls	r2, r0, #8
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	6849      	ldr	r1, [r1, #4]
 8007c38:	0849      	lsrs	r1, r1, #1
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	4605      	mov	r5, r0
 8007c40:	eb12 0804 	adds.w	r8, r2, r4
 8007c44:	eb43 0905 	adc.w	r9, r3, r5
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	469a      	mov	sl, r3
 8007c50:	4693      	mov	fp, r2
 8007c52:	4652      	mov	r2, sl
 8007c54:	465b      	mov	r3, fp
 8007c56:	4640      	mov	r0, r8
 8007c58:	4649      	mov	r1, r9
 8007c5a:	f7f8 ff1b 	bl	8000a94 <__aeabi_uldivmod>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4613      	mov	r3, r2
 8007c64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6c:	d308      	bcc.n	8007c80 <UART_SetConfig+0x430>
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c74:	d204      	bcs.n	8007c80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6a3a      	ldr	r2, [r7, #32]
 8007c7c:	60da      	str	r2, [r3, #12]
 8007c7e:	e0ce      	b.n	8007e1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c86:	e0ca      	b.n	8007e1e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c90:	d166      	bne.n	8007d60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d827      	bhi.n	8007cea <UART_SetConfig+0x49a>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <UART_SetConfig+0x450>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	08007ceb 	.word	0x08007ceb
 8007cb0:	08007cdb 	.word	0x08007cdb
 8007cb4:	08007ceb 	.word	0x08007ceb
 8007cb8:	08007ceb 	.word	0x08007ceb
 8007cbc:	08007ceb 	.word	0x08007ceb
 8007cc0:	08007ce3 	.word	0x08007ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f7fd faea 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8007cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cca:	e014      	b.n	8007cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ccc:	f7fd fafc 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8007cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cd2:	e010      	b.n	8007cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cd4:	4b4e      	ldr	r3, [pc, #312]	; (8007e10 <UART_SetConfig+0x5c0>)
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cd8:	e00d      	b.n	8007cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cda:	f7fd fa71 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8007cde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ce0:	e009      	b.n	8007cf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ce8:	e005      	b.n	8007cf6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8090 	beq.w	8007e1e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	4a44      	ldr	r2, [pc, #272]	; (8007e14 <UART_SetConfig+0x5c4>)
 8007d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d10:	005a      	lsls	r2, r3, #1
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	441a      	add	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	2b0f      	cmp	r3, #15
 8007d28:	d916      	bls.n	8007d58 <UART_SetConfig+0x508>
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d30:	d212      	bcs.n	8007d58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f023 030f 	bic.w	r3, r3, #15
 8007d3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	8bfb      	ldrh	r3, [r7, #30]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	8bfa      	ldrh	r2, [r7, #30]
 8007d54:	60da      	str	r2, [r3, #12]
 8007d56:	e062      	b.n	8007e1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d5e:	e05e      	b.n	8007e1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d828      	bhi.n	8007dba <UART_SetConfig+0x56a>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <UART_SetConfig+0x520>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	08007dbb 	.word	0x08007dbb
 8007d80:	08007dab 	.word	0x08007dab
 8007d84:	08007dbb 	.word	0x08007dbb
 8007d88:	08007dbb 	.word	0x08007dbb
 8007d8c:	08007dbb 	.word	0x08007dbb
 8007d90:	08007db3 	.word	0x08007db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d94:	f7fd fa82 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8007d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d9a:	e014      	b.n	8007dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d9c:	f7fd fa94 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007da2:	e010      	b.n	8007dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da4:	4b1a      	ldr	r3, [pc, #104]	; (8007e10 <UART_SetConfig+0x5c0>)
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007da8:	e00d      	b.n	8007dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007daa:	f7fd fa09 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8007dae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007db0:	e009      	b.n	8007dc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007db8:	e005      	b.n	8007dc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007dc4:	bf00      	nop
    }

    if (pclk != 0U)
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d028      	beq.n	8007e1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <UART_SetConfig+0x5c4>)
 8007dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	441a      	add	r2, r3
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	2b0f      	cmp	r3, #15
 8007df4:	d910      	bls.n	8007e18 <UART_SetConfig+0x5c8>
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfc:	d20c      	bcs.n	8007e18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60da      	str	r2, [r3, #12]
 8007e08:	e009      	b.n	8007e1e <UART_SetConfig+0x5ce>
 8007e0a:	bf00      	nop
 8007e0c:	40008000 	.word	0x40008000
 8007e10:	00f42400 	.word	0x00f42400
 8007e14:	08008514 	.word	0x08008514
      }
      else
      {
        ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2200      	movs	r2, #0
 8007e32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2200      	movs	r2, #0
 8007e38:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3730      	adds	r7, #48	; 0x30
 8007e42:	46bd      	mov	sp, r7
 8007e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01a      	beq.n	8007f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f46:	d10a      	bne.n	8007f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	605a      	str	r2, [r3, #4]
  }
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b098      	sub	sp, #96	; 0x60
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f9c:	f7fa fd26 	bl	80029ec <HAL_GetTick>
 8007fa0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d12f      	bne.n	8008010 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f88e 	bl	80080e0 <UART_WaitOnFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d022      	beq.n	8008010 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e063      	b.n	80080d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b04      	cmp	r3, #4
 800801c:	d149      	bne.n	80080b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800801e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008026:	2200      	movs	r2, #0
 8008028:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f857 	bl	80080e0 <UART_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d03c      	beq.n	80080b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	623b      	str	r3, [r7, #32]
   return(result);
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800804c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008056:	633b      	str	r3, [r7, #48]	; 0x30
 8008058:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800805c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e6      	bne.n	8008038 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3308      	adds	r3, #8
 8008070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60fb      	str	r3, [r7, #12]
   return(result);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f023 0301 	bic.w	r3, r3, #1
 8008080:	64bb      	str	r3, [r7, #72]	; 0x48
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3308      	adds	r3, #8
 8008088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800808a:	61fa      	str	r2, [r7, #28]
 800808c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	69b9      	ldr	r1, [r7, #24]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	617b      	str	r3, [r7, #20]
   return(result);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e5      	bne.n	800806a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e012      	b.n	80080d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3758      	adds	r7, #88	; 0x58
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f0:	e04f      	b.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f8:	d04b      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080fa:	f7fa fc77 	bl	80029ec <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <UART_WaitOnFlagUntilTimeout+0x30>
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e04e      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d037      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d034      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d031      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b08      	cmp	r3, #8
 800813a:	d110      	bne.n	800815e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2208      	movs	r2, #8
 8008142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f838 	bl	80081ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2208      	movs	r2, #8
 800814e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e029      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816c:	d111      	bne.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f81e 	bl	80081ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e00f      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4013      	ands	r3, r2
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d0a0      	beq.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b095      	sub	sp, #84	; 0x54
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
 80081e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e6      	bne.n	80081c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	61fb      	str	r3, [r7, #28]
   return(result);
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3308      	adds	r3, #8
 8008216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800821e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e3      	bne.n	80081f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d118      	bne.n	8008266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	60bb      	str	r3, [r7, #8]
   return(result);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f023 0310 	bic.w	r3, r3, #16
 8008248:	647b      	str	r3, [r7, #68]	; 0x44
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008252:	61bb      	str	r3, [r7, #24]
 8008254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6979      	ldr	r1, [r7, #20]
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	613b      	str	r3, [r7, #16]
   return(result);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e6      	bne.n	8008234 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	675a      	str	r2, [r3, #116]	; 0x74
}
 800827a:	bf00      	nop
 800827c:	3754      	adds	r7, #84	; 0x54
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_UARTEx_DisableFifoMode+0x16>
 8008298:	2302      	movs	r3, #2
 800829a:	e027      	b.n	80082ec <HAL_UARTEx_DisableFifoMode+0x66>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2224      	movs	r2, #36	; 0x24
 80082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800830c:	2302      	movs	r3, #2
 800830e:	e02d      	b.n	800836c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2224      	movs	r2, #36	; 0x24
 800831c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0201 	bic.w	r2, r2, #1
 8008336:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f84f 	bl	80083f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008388:	2302      	movs	r3, #2
 800838a:	e02d      	b.n	80083e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2224      	movs	r2, #36	; 0x24
 8008398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f811 	bl	80083f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d108      	bne.n	8008412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008410:	e031      	b.n	8008476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008412:	2308      	movs	r3, #8
 8008414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008416:	2308      	movs	r3, #8
 8008418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	0e5b      	lsrs	r3, r3, #25
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	0f5b      	lsrs	r3, r3, #29
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	7b3a      	ldrb	r2, [r7, #12]
 800843e:	4911      	ldr	r1, [pc, #68]	; (8008484 <UARTEx_SetNbDataToProcess+0x94>)
 8008440:	5c8a      	ldrb	r2, [r1, r2]
 8008442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008446:	7b3a      	ldrb	r2, [r7, #12]
 8008448:	490f      	ldr	r1, [pc, #60]	; (8008488 <UARTEx_SetNbDataToProcess+0x98>)
 800844a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800844c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	7b7a      	ldrb	r2, [r7, #13]
 800845c:	4909      	ldr	r1, [pc, #36]	; (8008484 <UARTEx_SetNbDataToProcess+0x94>)
 800845e:	5c8a      	ldrb	r2, [r1, r2]
 8008460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008464:	7b7a      	ldrb	r2, [r7, #13]
 8008466:	4908      	ldr	r1, [pc, #32]	; (8008488 <UARTEx_SetNbDataToProcess+0x98>)
 8008468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800846a:	fb93 f3f2 	sdiv	r3, r3, r2
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	0800852c 	.word	0x0800852c
 8008488:	08008534 	.word	0x08008534

0800848c <memset>:
 800848c:	4402      	add	r2, r0
 800848e:	4603      	mov	r3, r0
 8008490:	4293      	cmp	r3, r2
 8008492:	d100      	bne.n	8008496 <memset+0xa>
 8008494:	4770      	bx	lr
 8008496:	f803 1b01 	strb.w	r1, [r3], #1
 800849a:	e7f9      	b.n	8008490 <memset+0x4>

0800849c <__libc_init_array>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4d0d      	ldr	r5, [pc, #52]	; (80084d4 <__libc_init_array+0x38>)
 80084a0:	4c0d      	ldr	r4, [pc, #52]	; (80084d8 <__libc_init_array+0x3c>)
 80084a2:	1b64      	subs	r4, r4, r5
 80084a4:	10a4      	asrs	r4, r4, #2
 80084a6:	2600      	movs	r6, #0
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	d109      	bne.n	80084c0 <__libc_init_array+0x24>
 80084ac:	4d0b      	ldr	r5, [pc, #44]	; (80084dc <__libc_init_array+0x40>)
 80084ae:	4c0c      	ldr	r4, [pc, #48]	; (80084e0 <__libc_init_array+0x44>)
 80084b0:	f000 f818 	bl	80084e4 <_init>
 80084b4:	1b64      	subs	r4, r4, r5
 80084b6:	10a4      	asrs	r4, r4, #2
 80084b8:	2600      	movs	r6, #0
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	d105      	bne.n	80084ca <__libc_init_array+0x2e>
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c4:	4798      	blx	r3
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7ee      	b.n	80084a8 <__libc_init_array+0xc>
 80084ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ce:	4798      	blx	r3
 80084d0:	3601      	adds	r6, #1
 80084d2:	e7f2      	b.n	80084ba <__libc_init_array+0x1e>
 80084d4:	08008544 	.word	0x08008544
 80084d8:	08008544 	.word	0x08008544
 80084dc:	08008544 	.word	0x08008544
 80084e0:	08008548 	.word	0x08008548

080084e4 <_init>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr

080084f0 <_fini>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr
